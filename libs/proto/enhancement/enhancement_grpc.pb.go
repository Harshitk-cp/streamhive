// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: libs/proto/enhancement/enhancement.proto

package enhancement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnhancementService_EnhanceFrames_FullMethodName           = "/enhancement.EnhancementService/EnhanceFrames"
	EnhancementService_GetEnhancementConfig_FullMethodName    = "/enhancement.EnhancementService/GetEnhancementConfig"
	EnhancementService_UpdateEnhancementConfig_FullMethodName = "/enhancement.EnhancementService/UpdateEnhancementConfig"
)

// EnhancementServiceClient is the client API for EnhancementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EnhancementService handles frame enhancement
type EnhancementServiceClient interface {
	// Enhance a batch of frames
	EnhanceFrames(ctx context.Context, in *EnhanceFramesRequest, opts ...grpc.CallOption) (*EnhanceFramesResponse, error)
	// Get the enhancement configuration for a stream
	GetEnhancementConfig(ctx context.Context, in *GetEnhancementConfigRequest, opts ...grpc.CallOption) (*EnhancementConfig, error)
	// Update the enhancement configuration for a stream
	UpdateEnhancementConfig(ctx context.Context, in *EnhancementConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type enhancementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnhancementServiceClient(cc grpc.ClientConnInterface) EnhancementServiceClient {
	return &enhancementServiceClient{cc}
}

func (c *enhancementServiceClient) EnhanceFrames(ctx context.Context, in *EnhanceFramesRequest, opts ...grpc.CallOption) (*EnhanceFramesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnhanceFramesResponse)
	err := c.cc.Invoke(ctx, EnhancementService_EnhanceFrames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancementServiceClient) GetEnhancementConfig(ctx context.Context, in *GetEnhancementConfigRequest, opts ...grpc.CallOption) (*EnhancementConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnhancementConfig)
	err := c.cc.Invoke(ctx, EnhancementService_GetEnhancementConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancementServiceClient) UpdateEnhancementConfig(ctx context.Context, in *EnhancementConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EnhancementService_UpdateEnhancementConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnhancementServiceServer is the server API for EnhancementService service.
// All implementations must embed UnimplementedEnhancementServiceServer
// for forward compatibility.
//
// EnhancementService handles frame enhancement
type EnhancementServiceServer interface {
	// Enhance a batch of frames
	EnhanceFrames(context.Context, *EnhanceFramesRequest) (*EnhanceFramesResponse, error)
	// Get the enhancement configuration for a stream
	GetEnhancementConfig(context.Context, *GetEnhancementConfigRequest) (*EnhancementConfig, error)
	// Update the enhancement configuration for a stream
	UpdateEnhancementConfig(context.Context, *EnhancementConfig) (*emptypb.Empty, error)
	mustEmbedUnimplementedEnhancementServiceServer()
}

// UnimplementedEnhancementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnhancementServiceServer struct{}

func (UnimplementedEnhancementServiceServer) EnhanceFrames(context.Context, *EnhanceFramesRequest) (*EnhanceFramesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnhanceFrames not implemented")
}
func (UnimplementedEnhancementServiceServer) GetEnhancementConfig(context.Context, *GetEnhancementConfigRequest) (*EnhancementConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnhancementConfig not implemented")
}
func (UnimplementedEnhancementServiceServer) UpdateEnhancementConfig(context.Context, *EnhancementConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnhancementConfig not implemented")
}
func (UnimplementedEnhancementServiceServer) mustEmbedUnimplementedEnhancementServiceServer() {}
func (UnimplementedEnhancementServiceServer) testEmbeddedByValue()                            {}

// UnsafeEnhancementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnhancementServiceServer will
// result in compilation errors.
type UnsafeEnhancementServiceServer interface {
	mustEmbedUnimplementedEnhancementServiceServer()
}

func RegisterEnhancementServiceServer(s grpc.ServiceRegistrar, srv EnhancementServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnhancementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnhancementService_ServiceDesc, srv)
}

func _EnhancementService_EnhanceFrames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnhanceFramesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancementServiceServer).EnhanceFrames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancementService_EnhanceFrames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancementServiceServer).EnhanceFrames(ctx, req.(*EnhanceFramesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancementService_GetEnhancementConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnhancementConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancementServiceServer).GetEnhancementConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancementService_GetEnhancementConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancementServiceServer).GetEnhancementConfig(ctx, req.(*GetEnhancementConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancementService_UpdateEnhancementConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnhancementConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancementServiceServer).UpdateEnhancementConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancementService_UpdateEnhancementConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancementServiceServer).UpdateEnhancementConfig(ctx, req.(*EnhancementConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// EnhancementService_ServiceDesc is the grpc.ServiceDesc for EnhancementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnhancementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enhancement.EnhancementService",
	HandlerType: (*EnhancementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnhanceFrames",
			Handler:    _EnhancementService_EnhanceFrames_Handler,
		},
		{
			MethodName: "GetEnhancementConfig",
			Handler:    _EnhancementService_GetEnhancementConfig_Handler,
		},
		{
			MethodName: "UpdateEnhancementConfig",
			Handler:    _EnhancementService_UpdateEnhancementConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/proto/enhancement/enhancement.proto",
}
