// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: libs/proto/stream/stream.proto

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamService_CreateStream_FullMethodName              = "/router.v1.StreamService/CreateStream"
	StreamService_GetStream_FullMethodName                 = "/router.v1.StreamService/GetStream"
	StreamService_UpdateStream_FullMethodName              = "/router.v1.StreamService/UpdateStream"
	StreamService_DeleteStream_FullMethodName              = "/router.v1.StreamService/DeleteStream"
	StreamService_ListStreams_FullMethodName               = "/router.v1.StreamService/ListStreams"
	StreamService_StartStream_FullMethodName               = "/router.v1.StreamService/StartStream"
	StreamService_StopStream_FullMethodName                = "/router.v1.StreamService/StopStream"
	StreamService_GetStreamEvents_FullMethodName           = "/router.v1.StreamService/GetStreamEvents"
	StreamService_GetStreamMetadata_FullMethodName         = "/router.v1.StreamService/GetStreamMetadata"
	StreamService_SetStreamMetadata_FullMethodName         = "/router.v1.StreamService/SetStreamMetadata"
	StreamService_UpdateStreamMetadata_FullMethodName      = "/router.v1.StreamService/UpdateStreamMetadata"
	StreamService_DeleteStreamMetadataField_FullMethodName = "/router.v1.StreamService/DeleteStreamMetadataField"
	StreamService_AddStreamOutput_FullMethodName           = "/router.v1.StreamService/AddStreamOutput"
	StreamService_RemoveStreamOutput_FullMethodName        = "/router.v1.StreamService/RemoveStreamOutput"
	StreamService_AddStreamEnhancement_FullMethodName      = "/router.v1.StreamService/AddStreamEnhancement"
	StreamService_UpdateStreamEnhancement_FullMethodName   = "/router.v1.StreamService/UpdateStreamEnhancement"
	StreamService_RemoveStreamEnhancement_FullMethodName   = "/router.v1.StreamService/RemoveStreamEnhancement"
	StreamService_RegisterWebhook_FullMethodName           = "/router.v1.StreamService/RegisterWebhook"
	StreamService_UnregisterWebhook_FullMethodName         = "/router.v1.StreamService/UnregisterWebhook"
	StreamService_ListWebhooks_FullMethodName              = "/router.v1.StreamService/ListWebhooks"
	StreamService_TestWebhook_FullMethodName               = "/router.v1.StreamService/TestWebhook"
	StreamService_UpdateStreamStatus_FullMethodName        = "/router.v1.StreamService/UpdateStreamStatus"
	StreamService_UpdateStreamMetrics_FullMethodName       = "/router.v1.StreamService/UpdateStreamMetrics"
	StreamService_ValidateStreamKey_FullMethodName         = "/router.v1.StreamService/ValidateStreamKey"
)

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StreamService handles stream management and routing
type StreamServiceClient interface {
	// Stream management
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*Stream, error)
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*Stream, error)
	UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*Stream, error)
	DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error)
	// Stream operations
	StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error)
	StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStreamEvents(ctx context.Context, in *GetStreamEventsRequest, opts ...grpc.CallOption) (*GetStreamEventsResponse, error)
	// Stream metadata
	GetStreamMetadata(ctx context.Context, in *GetStreamMetadataRequest, opts ...grpc.CallOption) (*GetStreamMetadataResponse, error)
	SetStreamMetadata(ctx context.Context, in *SetStreamMetadataRequest, opts ...grpc.CallOption) (*GetStreamMetadataResponse, error)
	UpdateStreamMetadata(ctx context.Context, in *UpdateStreamMetadataRequest, opts ...grpc.CallOption) (*GetStreamMetadataResponse, error)
	DeleteStreamMetadataField(ctx context.Context, in *DeleteStreamMetadataFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Stream outputs
	AddStreamOutput(ctx context.Context, in *AddStreamOutputRequest, opts ...grpc.CallOption) (*StreamOutput, error)
	RemoveStreamOutput(ctx context.Context, in *RemoveStreamOutputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Stream enhancements
	AddStreamEnhancement(ctx context.Context, in *AddStreamEnhancementRequest, opts ...grpc.CallOption) (*StreamEnhancement, error)
	UpdateStreamEnhancement(ctx context.Context, in *UpdateStreamEnhancementRequest, opts ...grpc.CallOption) (*StreamEnhancement, error)
	RemoveStreamEnhancement(ctx context.Context, in *RemoveStreamEnhancementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Webhooks
	RegisterWebhook(ctx context.Context, in *RegisterWebhookRequest, opts ...grpc.CallOption) (*RegisterWebhookResponse, error)
	UnregisterWebhook(ctx context.Context, in *UnregisterWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksResponse, error)
	TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Internal methods (service-to-service)
	UpdateStreamStatus(ctx context.Context, in *UpdateStreamStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateStreamMetrics(ctx context.Context, in *UpdateStreamMetricsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateStreamKey(ctx context.Context, in *ValidateStreamKeyRequest, opts ...grpc.CallOption) (*ValidateStreamKeyResponse, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*Stream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stream)
	err := c.cc.Invoke(ctx, StreamService_CreateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*Stream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stream)
	err := c.cc.Invoke(ctx, StreamService_GetStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*Stream, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stream)
	err := c.cc.Invoke(ctx, StreamService_UpdateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamService_DeleteStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (*ListStreamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamsResponse)
	err := c.cc.Invoke(ctx, StreamService_ListStreams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartStreamResponse)
	err := c.cc.Invoke(ctx, StreamService_StartStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamService_StopStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) GetStreamEvents(ctx context.Context, in *GetStreamEventsRequest, opts ...grpc.CallOption) (*GetStreamEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamEventsResponse)
	err := c.cc.Invoke(ctx, StreamService_GetStreamEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) GetStreamMetadata(ctx context.Context, in *GetStreamMetadataRequest, opts ...grpc.CallOption) (*GetStreamMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamMetadataResponse)
	err := c.cc.Invoke(ctx, StreamService_GetStreamMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) SetStreamMetadata(ctx context.Context, in *SetStreamMetadataRequest, opts ...grpc.CallOption) (*GetStreamMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamMetadataResponse)
	err := c.cc.Invoke(ctx, StreamService_SetStreamMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) UpdateStreamMetadata(ctx context.Context, in *UpdateStreamMetadataRequest, opts ...grpc.CallOption) (*GetStreamMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamMetadataResponse)
	err := c.cc.Invoke(ctx, StreamService_UpdateStreamMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) DeleteStreamMetadataField(ctx context.Context, in *DeleteStreamMetadataFieldRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamService_DeleteStreamMetadataField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) AddStreamOutput(ctx context.Context, in *AddStreamOutputRequest, opts ...grpc.CallOption) (*StreamOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamOutput)
	err := c.cc.Invoke(ctx, StreamService_AddStreamOutput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) RemoveStreamOutput(ctx context.Context, in *RemoveStreamOutputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamService_RemoveStreamOutput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) AddStreamEnhancement(ctx context.Context, in *AddStreamEnhancementRequest, opts ...grpc.CallOption) (*StreamEnhancement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamEnhancement)
	err := c.cc.Invoke(ctx, StreamService_AddStreamEnhancement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) UpdateStreamEnhancement(ctx context.Context, in *UpdateStreamEnhancementRequest, opts ...grpc.CallOption) (*StreamEnhancement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamEnhancement)
	err := c.cc.Invoke(ctx, StreamService_UpdateStreamEnhancement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) RemoveStreamEnhancement(ctx context.Context, in *RemoveStreamEnhancementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamService_RemoveStreamEnhancement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) RegisterWebhook(ctx context.Context, in *RegisterWebhookRequest, opts ...grpc.CallOption) (*RegisterWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWebhookResponse)
	err := c.cc.Invoke(ctx, StreamService_RegisterWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) UnregisterWebhook(ctx context.Context, in *UnregisterWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamService_UnregisterWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) ListWebhooks(ctx context.Context, in *ListWebhooksRequest, opts ...grpc.CallOption) (*ListWebhooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWebhooksResponse)
	err := c.cc.Invoke(ctx, StreamService_ListWebhooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamService_TestWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) UpdateStreamStatus(ctx context.Context, in *UpdateStreamStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamService_UpdateStreamStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) UpdateStreamMetrics(ctx context.Context, in *UpdateStreamMetricsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StreamService_UpdateStreamMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) ValidateStreamKey(ctx context.Context, in *ValidateStreamKeyRequest, opts ...grpc.CallOption) (*ValidateStreamKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateStreamKeyResponse)
	err := c.cc.Invoke(ctx, StreamService_ValidateStreamKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility.
//
// StreamService handles stream management and routing
type StreamServiceServer interface {
	// Stream management
	CreateStream(context.Context, *CreateStreamRequest) (*Stream, error)
	GetStream(context.Context, *GetStreamRequest) (*Stream, error)
	UpdateStream(context.Context, *UpdateStreamRequest) (*Stream, error)
	DeleteStream(context.Context, *DeleteStreamRequest) (*emptypb.Empty, error)
	ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error)
	// Stream operations
	StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error)
	StopStream(context.Context, *StopStreamRequest) (*emptypb.Empty, error)
	GetStreamEvents(context.Context, *GetStreamEventsRequest) (*GetStreamEventsResponse, error)
	// Stream metadata
	GetStreamMetadata(context.Context, *GetStreamMetadataRequest) (*GetStreamMetadataResponse, error)
	SetStreamMetadata(context.Context, *SetStreamMetadataRequest) (*GetStreamMetadataResponse, error)
	UpdateStreamMetadata(context.Context, *UpdateStreamMetadataRequest) (*GetStreamMetadataResponse, error)
	DeleteStreamMetadataField(context.Context, *DeleteStreamMetadataFieldRequest) (*emptypb.Empty, error)
	// Stream outputs
	AddStreamOutput(context.Context, *AddStreamOutputRequest) (*StreamOutput, error)
	RemoveStreamOutput(context.Context, *RemoveStreamOutputRequest) (*emptypb.Empty, error)
	// Stream enhancements
	AddStreamEnhancement(context.Context, *AddStreamEnhancementRequest) (*StreamEnhancement, error)
	UpdateStreamEnhancement(context.Context, *UpdateStreamEnhancementRequest) (*StreamEnhancement, error)
	RemoveStreamEnhancement(context.Context, *RemoveStreamEnhancementRequest) (*emptypb.Empty, error)
	// Webhooks
	RegisterWebhook(context.Context, *RegisterWebhookRequest) (*RegisterWebhookResponse, error)
	UnregisterWebhook(context.Context, *UnregisterWebhookRequest) (*emptypb.Empty, error)
	ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksResponse, error)
	TestWebhook(context.Context, *TestWebhookRequest) (*emptypb.Empty, error)
	// Internal methods (service-to-service)
	UpdateStreamStatus(context.Context, *UpdateStreamStatusRequest) (*emptypb.Empty, error)
	UpdateStreamMetrics(context.Context, *UpdateStreamMetricsRequest) (*emptypb.Empty, error)
	ValidateStreamKey(context.Context, *ValidateStreamKeyRequest) (*ValidateStreamKeyResponse, error)
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamServiceServer struct{}

func (UnimplementedStreamServiceServer) CreateStream(context.Context, *CreateStreamRequest) (*Stream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedStreamServiceServer) GetStream(context.Context, *GetStreamRequest) (*Stream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedStreamServiceServer) UpdateStream(context.Context, *UpdateStreamRequest) (*Stream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}
func (UnimplementedStreamServiceServer) DeleteStream(context.Context, *DeleteStreamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (UnimplementedStreamServiceServer) ListStreams(context.Context, *ListStreamsRequest) (*ListStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedStreamServiceServer) StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedStreamServiceServer) StopStream(context.Context, *StopStreamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStream not implemented")
}
func (UnimplementedStreamServiceServer) GetStreamEvents(context.Context, *GetStreamEventsRequest) (*GetStreamEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamEvents not implemented")
}
func (UnimplementedStreamServiceServer) GetStreamMetadata(context.Context, *GetStreamMetadataRequest) (*GetStreamMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamMetadata not implemented")
}
func (UnimplementedStreamServiceServer) SetStreamMetadata(context.Context, *SetStreamMetadataRequest) (*GetStreamMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamMetadata not implemented")
}
func (UnimplementedStreamServiceServer) UpdateStreamMetadata(context.Context, *UpdateStreamMetadataRequest) (*GetStreamMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamMetadata not implemented")
}
func (UnimplementedStreamServiceServer) DeleteStreamMetadataField(context.Context, *DeleteStreamMetadataFieldRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStreamMetadataField not implemented")
}
func (UnimplementedStreamServiceServer) AddStreamOutput(context.Context, *AddStreamOutputRequest) (*StreamOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStreamOutput not implemented")
}
func (UnimplementedStreamServiceServer) RemoveStreamOutput(context.Context, *RemoveStreamOutputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStreamOutput not implemented")
}
func (UnimplementedStreamServiceServer) AddStreamEnhancement(context.Context, *AddStreamEnhancementRequest) (*StreamEnhancement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStreamEnhancement not implemented")
}
func (UnimplementedStreamServiceServer) UpdateStreamEnhancement(context.Context, *UpdateStreamEnhancementRequest) (*StreamEnhancement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamEnhancement not implemented")
}
func (UnimplementedStreamServiceServer) RemoveStreamEnhancement(context.Context, *RemoveStreamEnhancementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStreamEnhancement not implemented")
}
func (UnimplementedStreamServiceServer) RegisterWebhook(context.Context, *RegisterWebhookRequest) (*RegisterWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWebhook not implemented")
}
func (UnimplementedStreamServiceServer) UnregisterWebhook(context.Context, *UnregisterWebhookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterWebhook not implemented")
}
func (UnimplementedStreamServiceServer) ListWebhooks(context.Context, *ListWebhooksRequest) (*ListWebhooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (UnimplementedStreamServiceServer) TestWebhook(context.Context, *TestWebhookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestWebhook not implemented")
}
func (UnimplementedStreamServiceServer) UpdateStreamStatus(context.Context, *UpdateStreamStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamStatus not implemented")
}
func (UnimplementedStreamServiceServer) UpdateStreamMetrics(context.Context, *UpdateStreamMetricsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamMetrics not implemented")
}
func (UnimplementedStreamServiceServer) ValidateStreamKey(context.Context, *ValidateStreamKeyRequest) (*ValidateStreamKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateStreamKey not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}
func (UnimplementedStreamServiceServer) testEmbeddedByValue()                       {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_CreateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_GetStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_UpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).UpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_UpdateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).UpdateStream(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_DeleteStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).DeleteStream(ctx, req.(*DeleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_ListStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).ListStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_ListStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).ListStreams(ctx, req.(*ListStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_StartStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).StartStream(ctx, req.(*StartStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_StopStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).StopStream(ctx, req.(*StopStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_GetStreamEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).GetStreamEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_GetStreamEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).GetStreamEvents(ctx, req.(*GetStreamEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_GetStreamMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).GetStreamMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_GetStreamMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).GetStreamMetadata(ctx, req.(*GetStreamMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_SetStreamMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStreamMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).SetStreamMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_SetStreamMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).SetStreamMetadata(ctx, req.(*SetStreamMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_UpdateStreamMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).UpdateStreamMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_UpdateStreamMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).UpdateStreamMetadata(ctx, req.(*UpdateStreamMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_DeleteStreamMetadataField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamMetadataFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).DeleteStreamMetadataField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_DeleteStreamMetadataField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).DeleteStreamMetadataField(ctx, req.(*DeleteStreamMetadataFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_AddStreamOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStreamOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).AddStreamOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_AddStreamOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).AddStreamOutput(ctx, req.(*AddStreamOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_RemoveStreamOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).RemoveStreamOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_RemoveStreamOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).RemoveStreamOutput(ctx, req.(*RemoveStreamOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_AddStreamEnhancement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStreamEnhancementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).AddStreamEnhancement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_AddStreamEnhancement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).AddStreamEnhancement(ctx, req.(*AddStreamEnhancementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_UpdateStreamEnhancement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamEnhancementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).UpdateStreamEnhancement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_UpdateStreamEnhancement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).UpdateStreamEnhancement(ctx, req.(*UpdateStreamEnhancementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_RemoveStreamEnhancement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamEnhancementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).RemoveStreamEnhancement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_RemoveStreamEnhancement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).RemoveStreamEnhancement(ctx, req.(*RemoveStreamEnhancementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_RegisterWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).RegisterWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_RegisterWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).RegisterWebhook(ctx, req.(*RegisterWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_UnregisterWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).UnregisterWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_UnregisterWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).UnregisterWebhook(ctx, req.(*UnregisterWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_ListWebhooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).ListWebhooks(ctx, req.(*ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_TestWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).TestWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_TestWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).TestWebhook(ctx, req.(*TestWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_UpdateStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).UpdateStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_UpdateStreamStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).UpdateStreamStatus(ctx, req.(*UpdateStreamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_UpdateStreamMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).UpdateStreamMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_UpdateStreamMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).UpdateStreamMetrics(ctx, req.(*UpdateStreamMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_ValidateStreamKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateStreamKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).ValidateStreamKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_ValidateStreamKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).ValidateStreamKey(ctx, req.(*ValidateStreamKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "router.v1.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStream",
			Handler:    _StreamService_CreateStream_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _StreamService_GetStream_Handler,
		},
		{
			MethodName: "UpdateStream",
			Handler:    _StreamService_UpdateStream_Handler,
		},
		{
			MethodName: "DeleteStream",
			Handler:    _StreamService_DeleteStream_Handler,
		},
		{
			MethodName: "ListStreams",
			Handler:    _StreamService_ListStreams_Handler,
		},
		{
			MethodName: "StartStream",
			Handler:    _StreamService_StartStream_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _StreamService_StopStream_Handler,
		},
		{
			MethodName: "GetStreamEvents",
			Handler:    _StreamService_GetStreamEvents_Handler,
		},
		{
			MethodName: "GetStreamMetadata",
			Handler:    _StreamService_GetStreamMetadata_Handler,
		},
		{
			MethodName: "SetStreamMetadata",
			Handler:    _StreamService_SetStreamMetadata_Handler,
		},
		{
			MethodName: "UpdateStreamMetadata",
			Handler:    _StreamService_UpdateStreamMetadata_Handler,
		},
		{
			MethodName: "DeleteStreamMetadataField",
			Handler:    _StreamService_DeleteStreamMetadataField_Handler,
		},
		{
			MethodName: "AddStreamOutput",
			Handler:    _StreamService_AddStreamOutput_Handler,
		},
		{
			MethodName: "RemoveStreamOutput",
			Handler:    _StreamService_RemoveStreamOutput_Handler,
		},
		{
			MethodName: "AddStreamEnhancement",
			Handler:    _StreamService_AddStreamEnhancement_Handler,
		},
		{
			MethodName: "UpdateStreamEnhancement",
			Handler:    _StreamService_UpdateStreamEnhancement_Handler,
		},
		{
			MethodName: "RemoveStreamEnhancement",
			Handler:    _StreamService_RemoveStreamEnhancement_Handler,
		},
		{
			MethodName: "RegisterWebhook",
			Handler:    _StreamService_RegisterWebhook_Handler,
		},
		{
			MethodName: "UnregisterWebhook",
			Handler:    _StreamService_UnregisterWebhook_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _StreamService_ListWebhooks_Handler,
		},
		{
			MethodName: "TestWebhook",
			Handler:    _StreamService_TestWebhook_Handler,
		},
		{
			MethodName: "UpdateStreamStatus",
			Handler:    _StreamService_UpdateStreamStatus_Handler,
		},
		{
			MethodName: "UpdateStreamMetrics",
			Handler:    _StreamService_UpdateStreamMetrics_Handler,
		},
		{
			MethodName: "ValidateStreamKey",
			Handler:    _StreamService_ValidateStreamKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/proto/stream/stream.proto",
}
