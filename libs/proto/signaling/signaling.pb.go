// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.2
// source: libs/proto/signaling/signaling.proto

package signaling

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Payload       string                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalRequest) Reset() {
	*x = SignalRequest{}
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRequest) ProtoMessage() {}

func (x *SignalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRequest.ProtoReflect.Descriptor instead.
func (*SignalRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_signaling_signaling_proto_rawDescGZIP(), []int{0}
}

func (x *SignalRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SignalRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type SignalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalResponse) Reset() {
	*x = SignalResponse{}
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalResponse) ProtoMessage() {}

func (x *SignalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalResponse.ProtoReflect.Descriptor instead.
func (*SignalResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_signaling_signaling_proto_rawDescGZIP(), []int{1}
}

func (x *SignalResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type WebRTCConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Capabilities  []string               `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebRTCConnectRequest) Reset() {
	*x = WebRTCConnectRequest{}
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebRTCConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCConnectRequest) ProtoMessage() {}

func (x *WebRTCConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCConnectRequest.ProtoReflect.Descriptor instead.
func (*WebRTCConnectRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_signaling_signaling_proto_rawDescGZIP(), []int{2}
}

func (x *WebRTCConnectRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *WebRTCConnectRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WebRTCConnectRequest) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type ICEServer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Urls          []string               `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Credential    string                 `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ICEServer) Reset() {
	*x = ICEServer{}
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICEServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICEServer) ProtoMessage() {}

func (x *ICEServer) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICEServer.ProtoReflect.Descriptor instead.
func (*ICEServer) Descriptor() ([]byte, []int) {
	return file_libs_proto_signaling_signaling_proto_rawDescGZIP(), []int{3}
}

func (x *ICEServer) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *ICEServer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ICEServer) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

type WebRTCConnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	IceServers    []*ICEServer           `protobuf:"bytes,3,rep,name=ice_servers,json=iceServers,proto3" json:"ice_servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebRTCConnectResponse) Reset() {
	*x = WebRTCConnectResponse{}
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebRTCConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCConnectResponse) ProtoMessage() {}

func (x *WebRTCConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCConnectResponse.ProtoReflect.Descriptor instead.
func (*WebRTCConnectResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_signaling_signaling_proto_rawDescGZIP(), []int{4}
}

func (x *WebRTCConnectResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *WebRTCConnectResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WebRTCConnectResponse) GetIceServers() []*ICEServer {
	if x != nil {
		return x.IceServers
	}
	return nil
}

type WebRTCDisconnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebRTCDisconnectRequest) Reset() {
	*x = WebRTCDisconnectRequest{}
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebRTCDisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCDisconnectRequest) ProtoMessage() {}

func (x *WebRTCDisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCDisconnectRequest.ProtoReflect.Descriptor instead.
func (*WebRTCDisconnectRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_signaling_signaling_proto_rawDescGZIP(), []int{5}
}

func (x *WebRTCDisconnectRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type WebRTCDisconnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebRTCDisconnectResponse) Reset() {
	*x = WebRTCDisconnectResponse{}
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebRTCDisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCDisconnectResponse) ProtoMessage() {}

func (x *WebRTCDisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_signaling_signaling_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCDisconnectResponse.ProtoReflect.Descriptor instead.
func (*WebRTCDisconnectResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_signaling_signaling_proto_rawDescGZIP(), []int{6}
}

func (x *WebRTCDisconnectResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_libs_proto_signaling_signaling_proto protoreflect.FileDescriptor

const file_libs_proto_signaling_signaling_proto_rawDesc = "" +
	"\n" +
	"$libs/proto/signaling/signaling.proto\x12\tsignaling\"H\n" +
	"\rSignalRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\tR\apayload\"(\n" +
	"\x0eSignalResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\"p\n" +
	"\x14WebRTCConnectRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\"\n" +
	"\fcapabilities\x18\x03 \x03(\tR\fcapabilities\"[\n" +
	"\tICEServer\x12\x12\n" +
	"\x04urls\x18\x01 \x03(\tR\x04urls\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1e\n" +
	"\n" +
	"credential\x18\x03 \x01(\tR\n" +
	"credential\"\x85\x01\n" +
	"\x15WebRTCConnectResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x125\n" +
	"\vice_servers\x18\x03 \x03(\v2\x14.signaling.ICEServerR\n" +
	"iceServers\"8\n" +
	"\x17WebRTCDisconnectRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"2\n" +
	"\x18WebRTCDisconnectResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status2\x86\x02\n" +
	"\x10SignalingService\x12A\n" +
	"\n" +
	"SendSignal\x12\x18.signaling.SignalRequest\x1a\x19.signaling.SignalResponse\x12R\n" +
	"\rWebRTCConnect\x12\x1f.signaling.WebRTCConnectRequest\x1a .signaling.WebRTCConnectResponse\x12[\n" +
	"\x10WebRTCDisconnect\x12\".signaling.WebRTCDisconnectRequest\x1a#.signaling.WebRTCDisconnectResponseB\x16Z\x14libs/proto/signalingb\x06proto3"

var (
	file_libs_proto_signaling_signaling_proto_rawDescOnce sync.Once
	file_libs_proto_signaling_signaling_proto_rawDescData []byte
)

func file_libs_proto_signaling_signaling_proto_rawDescGZIP() []byte {
	file_libs_proto_signaling_signaling_proto_rawDescOnce.Do(func() {
		file_libs_proto_signaling_signaling_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_libs_proto_signaling_signaling_proto_rawDesc), len(file_libs_proto_signaling_signaling_proto_rawDesc)))
	})
	return file_libs_proto_signaling_signaling_proto_rawDescData
}

var file_libs_proto_signaling_signaling_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_libs_proto_signaling_signaling_proto_goTypes = []any{
	(*SignalRequest)(nil),            // 0: signaling.SignalRequest
	(*SignalResponse)(nil),           // 1: signaling.SignalResponse
	(*WebRTCConnectRequest)(nil),     // 2: signaling.WebRTCConnectRequest
	(*ICEServer)(nil),                // 3: signaling.ICEServer
	(*WebRTCConnectResponse)(nil),    // 4: signaling.WebRTCConnectResponse
	(*WebRTCDisconnectRequest)(nil),  // 5: signaling.WebRTCDisconnectRequest
	(*WebRTCDisconnectResponse)(nil), // 6: signaling.WebRTCDisconnectResponse
}
var file_libs_proto_signaling_signaling_proto_depIdxs = []int32{
	3, // 0: signaling.WebRTCConnectResponse.ice_servers:type_name -> signaling.ICEServer
	0, // 1: signaling.SignalingService.SendSignal:input_type -> signaling.SignalRequest
	2, // 2: signaling.SignalingService.WebRTCConnect:input_type -> signaling.WebRTCConnectRequest
	5, // 3: signaling.SignalingService.WebRTCDisconnect:input_type -> signaling.WebRTCDisconnectRequest
	1, // 4: signaling.SignalingService.SendSignal:output_type -> signaling.SignalResponse
	4, // 5: signaling.SignalingService.WebRTCConnect:output_type -> signaling.WebRTCConnectResponse
	6, // 6: signaling.SignalingService.WebRTCDisconnect:output_type -> signaling.WebRTCDisconnectResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_libs_proto_signaling_signaling_proto_init() }
func file_libs_proto_signaling_signaling_proto_init() {
	if File_libs_proto_signaling_signaling_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_libs_proto_signaling_signaling_proto_rawDesc), len(file_libs_proto_signaling_signaling_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_libs_proto_signaling_signaling_proto_goTypes,
		DependencyIndexes: file_libs_proto_signaling_signaling_proto_depIdxs,
		MessageInfos:      file_libs_proto_signaling_signaling_proto_msgTypes,
	}.Build()
	File_libs_proto_signaling_signaling_proto = out.File
	file_libs_proto_signaling_signaling_proto_goTypes = nil
	file_libs_proto_signaling_signaling_proto_depIdxs = nil
}
