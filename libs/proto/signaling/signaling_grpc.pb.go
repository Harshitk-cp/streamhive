// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: libs/proto/signaling/signaling.proto

package signaling

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SignalingService_SendSignalingMessage_FullMethodName = "/signaling.SignalingService/SendSignalingMessage"
	SignalingService_GetStreamInfo_FullMethodName        = "/signaling.SignalingService/GetStreamInfo"
	SignalingService_NotifyStreamEnded_FullMethodName    = "/signaling.SignalingService/NotifyStreamEnded"
	SignalingService_GetStats_FullMethodName             = "/signaling.SignalingService/GetStats"
	SignalingService_StreamSignaling_FullMethodName      = "/signaling.SignalingService/StreamSignaling"
)

// SignalingServiceClient is the client API for SignalingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SignalingService handles WebRTC signaling
type SignalingServiceClient interface {
	// SendSignalingMessage sends a signaling message
	SendSignalingMessage(ctx context.Context, in *SignalingMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetStreamInfo gets information about a stream
	GetStreamInfo(ctx context.Context, in *GetStreamInfoRequest, opts ...grpc.CallOption) (*StreamInfo, error)
	// NotifyStreamEnded notifies clients that a stream has ended
	NotifyStreamEnded(ctx context.Context, in *NotifyStreamEndedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetStats gets statistics about the signaling service
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SignalingStats, error)
	// StreamSignaling establishes a bidirectional signaling stream
	StreamSignaling(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SignalingMessage, SignalingMessage], error)
}

type signalingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalingServiceClient(cc grpc.ClientConnInterface) SignalingServiceClient {
	return &signalingServiceClient{cc}
}

func (c *signalingServiceClient) SendSignalingMessage(ctx context.Context, in *SignalingMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SignalingService_SendSignalingMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalingServiceClient) GetStreamInfo(ctx context.Context, in *GetStreamInfoRequest, opts ...grpc.CallOption) (*StreamInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamInfo)
	err := c.cc.Invoke(ctx, SignalingService_GetStreamInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalingServiceClient) NotifyStreamEnded(ctx context.Context, in *NotifyStreamEndedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SignalingService_NotifyStreamEnded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalingServiceClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SignalingStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignalingStats)
	err := c.cc.Invoke(ctx, SignalingService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalingServiceClient) StreamSignaling(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SignalingMessage, SignalingMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SignalingService_ServiceDesc.Streams[0], SignalingService_StreamSignaling_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SignalingMessage, SignalingMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SignalingService_StreamSignalingClient = grpc.BidiStreamingClient[SignalingMessage, SignalingMessage]

// SignalingServiceServer is the server API for SignalingService service.
// All implementations must embed UnimplementedSignalingServiceServer
// for forward compatibility.
//
// SignalingService handles WebRTC signaling
type SignalingServiceServer interface {
	// SendSignalingMessage sends a signaling message
	SendSignalingMessage(context.Context, *SignalingMessage) (*emptypb.Empty, error)
	// GetStreamInfo gets information about a stream
	GetStreamInfo(context.Context, *GetStreamInfoRequest) (*StreamInfo, error)
	// NotifyStreamEnded notifies clients that a stream has ended
	NotifyStreamEnded(context.Context, *NotifyStreamEndedRequest) (*emptypb.Empty, error)
	// GetStats gets statistics about the signaling service
	GetStats(context.Context, *emptypb.Empty) (*SignalingStats, error)
	// StreamSignaling establishes a bidirectional signaling stream
	StreamSignaling(grpc.BidiStreamingServer[SignalingMessage, SignalingMessage]) error
	mustEmbedUnimplementedSignalingServiceServer()
}

// UnimplementedSignalingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignalingServiceServer struct{}

func (UnimplementedSignalingServiceServer) SendSignalingMessage(context.Context, *SignalingMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignalingMessage not implemented")
}
func (UnimplementedSignalingServiceServer) GetStreamInfo(context.Context, *GetStreamInfoRequest) (*StreamInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamInfo not implemented")
}
func (UnimplementedSignalingServiceServer) NotifyStreamEnded(context.Context, *NotifyStreamEndedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStreamEnded not implemented")
}
func (UnimplementedSignalingServiceServer) GetStats(context.Context, *emptypb.Empty) (*SignalingStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedSignalingServiceServer) StreamSignaling(grpc.BidiStreamingServer[SignalingMessage, SignalingMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSignaling not implemented")
}
func (UnimplementedSignalingServiceServer) mustEmbedUnimplementedSignalingServiceServer() {}
func (UnimplementedSignalingServiceServer) testEmbeddedByValue()                          {}

// UnsafeSignalingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalingServiceServer will
// result in compilation errors.
type UnsafeSignalingServiceServer interface {
	mustEmbedUnimplementedSignalingServiceServer()
}

func RegisterSignalingServiceServer(s grpc.ServiceRegistrar, srv SignalingServiceServer) {
	// If the following call pancis, it indicates UnimplementedSignalingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SignalingService_ServiceDesc, srv)
}

func _SignalingService_SendSignalingMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServiceServer).SendSignalingMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalingService_SendSignalingMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServiceServer).SendSignalingMessage(ctx, req.(*SignalingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalingService_GetStreamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServiceServer).GetStreamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalingService_GetStreamInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServiceServer).GetStreamInfo(ctx, req.(*GetStreamInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalingService_NotifyStreamEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyStreamEndedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServiceServer).NotifyStreamEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalingService_NotifyStreamEnded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServiceServer).NotifyStreamEnded(ctx, req.(*NotifyStreamEndedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalingService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalingService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServiceServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalingService_StreamSignaling_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignalingServiceServer).StreamSignaling(&grpc.GenericServerStream[SignalingMessage, SignalingMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SignalingService_StreamSignalingServer = grpc.BidiStreamingServer[SignalingMessage, SignalingMessage]

// SignalingService_ServiceDesc is the grpc.ServiceDesc for SignalingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignalingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signaling.SignalingService",
	HandlerType: (*SignalingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSignalingMessage",
			Handler:    _SignalingService_SendSignalingMessage_Handler,
		},
		{
			MethodName: "GetStreamInfo",
			Handler:    _SignalingService_GetStreamInfo_Handler,
		},
		{
			MethodName: "NotifyStreamEnded",
			Handler:    _SignalingService_NotifyStreamEnded_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _SignalingService_GetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSignaling",
			Handler:       _SignalingService_StreamSignaling_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "libs/proto/signaling/signaling.proto",
}
