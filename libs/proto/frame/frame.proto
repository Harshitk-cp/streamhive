// libs/proto/frame/frame.proto
syntax = "proto3";

package frame;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "libs/proto/frame";

// FrameSplitterService handles frame processing and distribution
service FrameSplitterService {
  // ProcessFrame processes a single frame
  rpc ProcessFrame(Frame) returns (ProcessFrameResponse);

  // ProcessFrameBatch processes a batch of frames
  rpc ProcessFrameBatch(ProcessFrameBatchRequest) returns (ProcessFrameBatchResponse);

  // SubscribeToStream subscribes to a stream and receives frames
  rpc SubscribeToStream(SubscribeToStreamRequest) returns (stream Frame);

  // RegisterConsumer registers a consumer service
  rpc RegisterConsumer(RegisterConsumerRequest) returns (RegisterConsumerResponse);

  // ListStreams lists all active streams
  rpc ListStreams(google.protobuf.Empty) returns (ListStreamsResponse);
}

// FrameType represents the type of a frame
enum FrameType {
  UNKNOWN = 0;
  VIDEO = 1;
  AUDIO = 2;
  METADATA = 3;
}

// Frame represents a media frame
message Frame {
  string stream_id = 1;
  string frame_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  FrameType type = 4;
  bytes data = 5;
  map<string, string> metadata = 6;
  int64 sequence = 7;
  bool is_key_frame = 8;
}

// ProcessFrameResponse is the response to a ProcessFrame request
message ProcessFrameResponse {
  string frame_id = 1;
  string status = 2;
}

// ProcessFrameBatchRequest is a request to process a batch of frames
message ProcessFrameBatchRequest {
  string stream_id = 1;
  repeated Frame frames = 2;
}

// ProcessFrameBatchResponse is the response to a ProcessFrameBatch request
message ProcessFrameBatchResponse {
  string status = 1;
  int32 processed_count = 2;
}

// SubscribeToStreamRequest is a request to subscribe to a stream
message SubscribeToStreamRequest {
  string stream_id = 1;
  string consumer_id = 2;
  bool include_video = 3;
  bool include_audio = 4;
  bool include_metadata = 5;
}

// RegisterConsumerRequest is a request to register a consumer
message RegisterConsumerRequest {
  string consumer_id = 1;
  string consumer_type = 2;
  repeated string capabilities = 3;
}

// RegisterConsumerResponse is the response to a RegisterConsumer request
message RegisterConsumerResponse {
  string consumer_id = 1;
  string status = 2;
}

// ListStreamsResponse is the response to a ListStreams request
message ListStreamsResponse {
  repeated StreamInfo streams = 1;
}

// StreamInfo contains information about a stream
message StreamInfo {
  string stream_id = 1;
  string status = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp last_activity = 4;
}
