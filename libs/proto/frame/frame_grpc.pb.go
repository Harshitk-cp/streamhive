// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: libs/proto/frame/frame.proto

package frame

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FrameSplitterService_ProcessFrame_FullMethodName       = "/frame.FrameSplitterService/ProcessFrame"
	FrameSplitterService_ProcessFrameBatch_FullMethodName  = "/frame.FrameSplitterService/ProcessFrameBatch"
	FrameSplitterService_GetStreamConfig_FullMethodName    = "/frame.FrameSplitterService/GetStreamConfig"
	FrameSplitterService_UpdateStreamConfig_FullMethodName = "/frame.FrameSplitterService/UpdateStreamConfig"
	FrameSplitterService_GetStreamStats_FullMethodName     = "/frame.FrameSplitterService/GetStreamStats"
	FrameSplitterService_RestoreFrame_FullMethodName       = "/frame.FrameSplitterService/RestoreFrame"
)

// FrameSplitterServiceClient is the client API for FrameSplitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FrameSplitterService handles frame splitting and routing
type FrameSplitterServiceClient interface {
	// Process a single frame
	ProcessFrame(ctx context.Context, in *ProcessFrameRequest, opts ...grpc.CallOption) (*ProcessFrameResponse, error)
	// Process a batch of frames
	ProcessFrameBatch(ctx context.Context, in *ProcessFrameBatchRequest, opts ...grpc.CallOption) (*ProcessFrameBatchResponse, error)
	// Get the configuration for a stream
	GetStreamConfig(ctx context.Context, in *GetStreamConfigRequest, opts ...grpc.CallOption) (*StreamConfig, error)
	// Update the configuration for a stream
	UpdateStreamConfig(ctx context.Context, in *StreamConfig, opts ...grpc.CallOption) (*UpdateStreamConfigResponse, error)
	// Get statistics for a stream
	GetStreamStats(ctx context.Context, in *GetStreamStatsRequest, opts ...grpc.CallOption) (*StreamStats, error)
	// Restore a frame from backup
	RestoreFrame(ctx context.Context, in *RestoreFrameRequest, opts ...grpc.CallOption) (*Frame, error)
}

type frameSplitterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrameSplitterServiceClient(cc grpc.ClientConnInterface) FrameSplitterServiceClient {
	return &frameSplitterServiceClient{cc}
}

func (c *frameSplitterServiceClient) ProcessFrame(ctx context.Context, in *ProcessFrameRequest, opts ...grpc.CallOption) (*ProcessFrameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessFrameResponse)
	err := c.cc.Invoke(ctx, FrameSplitterService_ProcessFrame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSplitterServiceClient) ProcessFrameBatch(ctx context.Context, in *ProcessFrameBatchRequest, opts ...grpc.CallOption) (*ProcessFrameBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessFrameBatchResponse)
	err := c.cc.Invoke(ctx, FrameSplitterService_ProcessFrameBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSplitterServiceClient) GetStreamConfig(ctx context.Context, in *GetStreamConfigRequest, opts ...grpc.CallOption) (*StreamConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamConfig)
	err := c.cc.Invoke(ctx, FrameSplitterService_GetStreamConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSplitterServiceClient) UpdateStreamConfig(ctx context.Context, in *StreamConfig, opts ...grpc.CallOption) (*UpdateStreamConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStreamConfigResponse)
	err := c.cc.Invoke(ctx, FrameSplitterService_UpdateStreamConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSplitterServiceClient) GetStreamStats(ctx context.Context, in *GetStreamStatsRequest, opts ...grpc.CallOption) (*StreamStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamStats)
	err := c.cc.Invoke(ctx, FrameSplitterService_GetStreamStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameSplitterServiceClient) RestoreFrame(ctx context.Context, in *RestoreFrameRequest, opts ...grpc.CallOption) (*Frame, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Frame)
	err := c.cc.Invoke(ctx, FrameSplitterService_RestoreFrame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrameSplitterServiceServer is the server API for FrameSplitterService service.
// All implementations must embed UnimplementedFrameSplitterServiceServer
// for forward compatibility.
//
// FrameSplitterService handles frame splitting and routing
type FrameSplitterServiceServer interface {
	// Process a single frame
	ProcessFrame(context.Context, *ProcessFrameRequest) (*ProcessFrameResponse, error)
	// Process a batch of frames
	ProcessFrameBatch(context.Context, *ProcessFrameBatchRequest) (*ProcessFrameBatchResponse, error)
	// Get the configuration for a stream
	GetStreamConfig(context.Context, *GetStreamConfigRequest) (*StreamConfig, error)
	// Update the configuration for a stream
	UpdateStreamConfig(context.Context, *StreamConfig) (*UpdateStreamConfigResponse, error)
	// Get statistics for a stream
	GetStreamStats(context.Context, *GetStreamStatsRequest) (*StreamStats, error)
	// Restore a frame from backup
	RestoreFrame(context.Context, *RestoreFrameRequest) (*Frame, error)
	mustEmbedUnimplementedFrameSplitterServiceServer()
}

// UnimplementedFrameSplitterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFrameSplitterServiceServer struct{}

func (UnimplementedFrameSplitterServiceServer) ProcessFrame(context.Context, *ProcessFrameRequest) (*ProcessFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFrame not implemented")
}
func (UnimplementedFrameSplitterServiceServer) ProcessFrameBatch(context.Context, *ProcessFrameBatchRequest) (*ProcessFrameBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFrameBatch not implemented")
}
func (UnimplementedFrameSplitterServiceServer) GetStreamConfig(context.Context, *GetStreamConfigRequest) (*StreamConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamConfig not implemented")
}
func (UnimplementedFrameSplitterServiceServer) UpdateStreamConfig(context.Context, *StreamConfig) (*UpdateStreamConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamConfig not implemented")
}
func (UnimplementedFrameSplitterServiceServer) GetStreamStats(context.Context, *GetStreamStatsRequest) (*StreamStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamStats not implemented")
}
func (UnimplementedFrameSplitterServiceServer) RestoreFrame(context.Context, *RestoreFrameRequest) (*Frame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFrame not implemented")
}
func (UnimplementedFrameSplitterServiceServer) mustEmbedUnimplementedFrameSplitterServiceServer() {}
func (UnimplementedFrameSplitterServiceServer) testEmbeddedByValue()                              {}

// UnsafeFrameSplitterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrameSplitterServiceServer will
// result in compilation errors.
type UnsafeFrameSplitterServiceServer interface {
	mustEmbedUnimplementedFrameSplitterServiceServer()
}

func RegisterFrameSplitterServiceServer(s grpc.ServiceRegistrar, srv FrameSplitterServiceServer) {
	// If the following call pancis, it indicates UnimplementedFrameSplitterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FrameSplitterService_ServiceDesc, srv)
}

func _FrameSplitterService_ProcessFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSplitterServiceServer).ProcessFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrameSplitterService_ProcessFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSplitterServiceServer).ProcessFrame(ctx, req.(*ProcessFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSplitterService_ProcessFrameBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessFrameBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSplitterServiceServer).ProcessFrameBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrameSplitterService_ProcessFrameBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSplitterServiceServer).ProcessFrameBatch(ctx, req.(*ProcessFrameBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSplitterService_GetStreamConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSplitterServiceServer).GetStreamConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrameSplitterService_GetStreamConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSplitterServiceServer).GetStreamConfig(ctx, req.(*GetStreamConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSplitterService_UpdateStreamConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSplitterServiceServer).UpdateStreamConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrameSplitterService_UpdateStreamConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSplitterServiceServer).UpdateStreamConfig(ctx, req.(*StreamConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSplitterService_GetStreamStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSplitterServiceServer).GetStreamStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrameSplitterService_GetStreamStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSplitterServiceServer).GetStreamStats(ctx, req.(*GetStreamStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrameSplitterService_RestoreFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameSplitterServiceServer).RestoreFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FrameSplitterService_RestoreFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameSplitterServiceServer).RestoreFrame(ctx, req.(*RestoreFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrameSplitterService_ServiceDesc is the grpc.ServiceDesc for FrameSplitterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrameSplitterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frame.FrameSplitterService",
	HandlerType: (*FrameSplitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessFrame",
			Handler:    _FrameSplitterService_ProcessFrame_Handler,
		},
		{
			MethodName: "ProcessFrameBatch",
			Handler:    _FrameSplitterService_ProcessFrameBatch_Handler,
		},
		{
			MethodName: "GetStreamConfig",
			Handler:    _FrameSplitterService_GetStreamConfig_Handler,
		},
		{
			MethodName: "UpdateStreamConfig",
			Handler:    _FrameSplitterService_UpdateStreamConfig_Handler,
		},
		{
			MethodName: "GetStreamStats",
			Handler:    _FrameSplitterService_GetStreamStats_Handler,
		},
		{
			MethodName: "RestoreFrame",
			Handler:    _FrameSplitterService_RestoreFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/proto/frame/frame.proto",
}
