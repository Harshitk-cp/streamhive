// libs/proto/webrtc/webrtc.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: libs/proto/webrtc/webrtc.proto

package webrtc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebRTCService_CreateStream_FullMethodName       = "/webrtc.WebRTCService/CreateStream"
	WebRTCService_DestroyStream_FullMethodName      = "/webrtc.WebRTCService/DestroyStream"
	WebRTCService_AddVideoFrame_FullMethodName      = "/webrtc.WebRTCService/AddVideoFrame"
	WebRTCService_AddAudioFrame_FullMethodName      = "/webrtc.WebRTCService/AddAudioFrame"
	WebRTCService_GetStreamStats_FullMethodName     = "/webrtc.WebRTCService/GetStreamStats"
	WebRTCService_HandleOffer_FullMethodName        = "/webrtc.WebRTCService/HandleOffer"
	WebRTCService_HandleICECandidate_FullMethodName = "/webrtc.WebRTCService/HandleICECandidate"
)

// WebRTCServiceClient is the client API for WebRTCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WebRTC service for managing WebRTC streams
type WebRTCServiceClient interface {
	// Create a new stream
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
	// Destroy a stream
	DestroyStream(ctx context.Context, in *DestroyStreamRequest, opts ...grpc.CallOption) (*DestroyStreamResponse, error)
	// Add a video frame to a stream
	AddVideoFrame(ctx context.Context, in *AddVideoFrameRequest, opts ...grpc.CallOption) (*AddVideoFrameResponse, error)
	// Add an audio frame to a stream
	AddAudioFrame(ctx context.Context, in *AddAudioFrameRequest, opts ...grpc.CallOption) (*AddAudioFrameResponse, error)
	// Get stats for a stream
	GetStreamStats(ctx context.Context, in *GetStreamStatsRequest, opts ...grpc.CallOption) (*GetStreamStatsResponse, error)
	// Handle SDP offer from a viewer
	HandleOffer(ctx context.Context, in *SDPOfferRequest, opts ...grpc.CallOption) (*SDPAnswerResponse, error)
	// Handle ICE candidate from a viewer
	HandleICECandidate(ctx context.Context, in *ICECandidateRequest, opts ...grpc.CallOption) (*ICECandidateResponse, error)
}

type webRTCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebRTCServiceClient(cc grpc.ClientConnInterface) WebRTCServiceClient {
	return &webRTCServiceClient{cc}
}

func (c *webRTCServiceClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, WebRTCService_CreateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) DestroyStream(ctx context.Context, in *DestroyStreamRequest, opts ...grpc.CallOption) (*DestroyStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyStreamResponse)
	err := c.cc.Invoke(ctx, WebRTCService_DestroyStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) AddVideoFrame(ctx context.Context, in *AddVideoFrameRequest, opts ...grpc.CallOption) (*AddVideoFrameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVideoFrameResponse)
	err := c.cc.Invoke(ctx, WebRTCService_AddVideoFrame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) AddAudioFrame(ctx context.Context, in *AddAudioFrameRequest, opts ...grpc.CallOption) (*AddAudioFrameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAudioFrameResponse)
	err := c.cc.Invoke(ctx, WebRTCService_AddAudioFrame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) GetStreamStats(ctx context.Context, in *GetStreamStatsRequest, opts ...grpc.CallOption) (*GetStreamStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamStatsResponse)
	err := c.cc.Invoke(ctx, WebRTCService_GetStreamStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) HandleOffer(ctx context.Context, in *SDPOfferRequest, opts ...grpc.CallOption) (*SDPAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SDPAnswerResponse)
	err := c.cc.Invoke(ctx, WebRTCService_HandleOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) HandleICECandidate(ctx context.Context, in *ICECandidateRequest, opts ...grpc.CallOption) (*ICECandidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ICECandidateResponse)
	err := c.cc.Invoke(ctx, WebRTCService_HandleICECandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebRTCServiceServer is the server API for WebRTCService service.
// All implementations must embed UnimplementedWebRTCServiceServer
// for forward compatibility.
//
// WebRTC service for managing WebRTC streams
type WebRTCServiceServer interface {
	// Create a new stream
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
	// Destroy a stream
	DestroyStream(context.Context, *DestroyStreamRequest) (*DestroyStreamResponse, error)
	// Add a video frame to a stream
	AddVideoFrame(context.Context, *AddVideoFrameRequest) (*AddVideoFrameResponse, error)
	// Add an audio frame to a stream
	AddAudioFrame(context.Context, *AddAudioFrameRequest) (*AddAudioFrameResponse, error)
	// Get stats for a stream
	GetStreamStats(context.Context, *GetStreamStatsRequest) (*GetStreamStatsResponse, error)
	// Handle SDP offer from a viewer
	HandleOffer(context.Context, *SDPOfferRequest) (*SDPAnswerResponse, error)
	// Handle ICE candidate from a viewer
	HandleICECandidate(context.Context, *ICECandidateRequest) (*ICECandidateResponse, error)
	mustEmbedUnimplementedWebRTCServiceServer()
}

// UnimplementedWebRTCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebRTCServiceServer struct{}

func (UnimplementedWebRTCServiceServer) CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedWebRTCServiceServer) DestroyStream(context.Context, *DestroyStreamRequest) (*DestroyStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyStream not implemented")
}
func (UnimplementedWebRTCServiceServer) AddVideoFrame(context.Context, *AddVideoFrameRequest) (*AddVideoFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoFrame not implemented")
}
func (UnimplementedWebRTCServiceServer) AddAudioFrame(context.Context, *AddAudioFrameRequest) (*AddAudioFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAudioFrame not implemented")
}
func (UnimplementedWebRTCServiceServer) GetStreamStats(context.Context, *GetStreamStatsRequest) (*GetStreamStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamStats not implemented")
}
func (UnimplementedWebRTCServiceServer) HandleOffer(context.Context, *SDPOfferRequest) (*SDPAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOffer not implemented")
}
func (UnimplementedWebRTCServiceServer) HandleICECandidate(context.Context, *ICECandidateRequest) (*ICECandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleICECandidate not implemented")
}
func (UnimplementedWebRTCServiceServer) mustEmbedUnimplementedWebRTCServiceServer() {}
func (UnimplementedWebRTCServiceServer) testEmbeddedByValue()                       {}

// UnsafeWebRTCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebRTCServiceServer will
// result in compilation errors.
type UnsafeWebRTCServiceServer interface {
	mustEmbedUnimplementedWebRTCServiceServer()
}

func RegisterWebRTCServiceServer(s grpc.ServiceRegistrar, srv WebRTCServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebRTCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebRTCService_ServiceDesc, srv)
}

func _WebRTCService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_CreateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_DestroyStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).DestroyStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_DestroyStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).DestroyStream(ctx, req.(*DestroyStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_AddVideoFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).AddVideoFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_AddVideoFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).AddVideoFrame(ctx, req.(*AddVideoFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_AddAudioFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAudioFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).AddAudioFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_AddAudioFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).AddAudioFrame(ctx, req.(*AddAudioFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_GetStreamStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).GetStreamStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_GetStreamStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).GetStreamStats(ctx, req.(*GetStreamStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_HandleOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDPOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).HandleOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_HandleOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).HandleOffer(ctx, req.(*SDPOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_HandleICECandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ICECandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).HandleICECandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_HandleICECandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).HandleICECandidate(ctx, req.(*ICECandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebRTCService_ServiceDesc is the grpc.ServiceDesc for WebRTCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebRTCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webrtc.WebRTCService",
	HandlerType: (*WebRTCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStream",
			Handler:    _WebRTCService_CreateStream_Handler,
		},
		{
			MethodName: "DestroyStream",
			Handler:    _WebRTCService_DestroyStream_Handler,
		},
		{
			MethodName: "AddVideoFrame",
			Handler:    _WebRTCService_AddVideoFrame_Handler,
		},
		{
			MethodName: "AddAudioFrame",
			Handler:    _WebRTCService_AddAudioFrame_Handler,
		},
		{
			MethodName: "GetStreamStats",
			Handler:    _WebRTCService_GetStreamStats_Handler,
		},
		{
			MethodName: "HandleOffer",
			Handler:    _WebRTCService_HandleOffer_Handler,
		},
		{
			MethodName: "HandleICECandidate",
			Handler:    _WebRTCService_HandleICECandidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/proto/webrtc/webrtc.proto",
}

const (
	SignalingService_RegisterStream_FullMethodName   = "/webrtc.SignalingService/RegisterStream"
	SignalingService_UnregisterStream_FullMethodName = "/webrtc.SignalingService/UnregisterStream"
)

// SignalingServiceClient is the client API for SignalingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Signaling service for managing WebRTC signaling
type SignalingServiceClient interface {
	// Register a stream
	RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*RegisterStreamResponse, error)
	// Unregister a stream
	UnregisterStream(ctx context.Context, in *UnregisterStreamRequest, opts ...grpc.CallOption) (*UnregisterStreamResponse, error)
}

type signalingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalingServiceClient(cc grpc.ClientConnInterface) SignalingServiceClient {
	return &signalingServiceClient{cc}
}

func (c *signalingServiceClient) RegisterStream(ctx context.Context, in *RegisterStreamRequest, opts ...grpc.CallOption) (*RegisterStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterStreamResponse)
	err := c.cc.Invoke(ctx, SignalingService_RegisterStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalingServiceClient) UnregisterStream(ctx context.Context, in *UnregisterStreamRequest, opts ...grpc.CallOption) (*UnregisterStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterStreamResponse)
	err := c.cc.Invoke(ctx, SignalingService_UnregisterStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignalingServiceServer is the server API for SignalingService service.
// All implementations must embed UnimplementedSignalingServiceServer
// for forward compatibility.
//
// Signaling service for managing WebRTC signaling
type SignalingServiceServer interface {
	// Register a stream
	RegisterStream(context.Context, *RegisterStreamRequest) (*RegisterStreamResponse, error)
	// Unregister a stream
	UnregisterStream(context.Context, *UnregisterStreamRequest) (*UnregisterStreamResponse, error)
	mustEmbedUnimplementedSignalingServiceServer()
}

// UnimplementedSignalingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignalingServiceServer struct{}

func (UnimplementedSignalingServiceServer) RegisterStream(context.Context, *RegisterStreamRequest) (*RegisterStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStream not implemented")
}
func (UnimplementedSignalingServiceServer) UnregisterStream(context.Context, *UnregisterStreamRequest) (*UnregisterStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterStream not implemented")
}
func (UnimplementedSignalingServiceServer) mustEmbedUnimplementedSignalingServiceServer() {}
func (UnimplementedSignalingServiceServer) testEmbeddedByValue()                          {}

// UnsafeSignalingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalingServiceServer will
// result in compilation errors.
type UnsafeSignalingServiceServer interface {
	mustEmbedUnimplementedSignalingServiceServer()
}

func RegisterSignalingServiceServer(s grpc.ServiceRegistrar, srv SignalingServiceServer) {
	// If the following call pancis, it indicates UnimplementedSignalingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SignalingService_ServiceDesc, srv)
}

func _SignalingService_RegisterStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServiceServer).RegisterStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalingService_RegisterStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServiceServer).RegisterStream(ctx, req.(*RegisterStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalingService_UnregisterStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServiceServer).UnregisterStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalingService_UnregisterStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServiceServer).UnregisterStream(ctx, req.(*UnregisterStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignalingService_ServiceDesc is the grpc.ServiceDesc for SignalingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignalingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webrtc.SignalingService",
	HandlerType: (*SignalingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterStream",
			Handler:    _SignalingService_RegisterStream_Handler,
		},
		{
			MethodName: "UnregisterStream",
			Handler:    _SignalingService_UnregisterStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/proto/webrtc/webrtc.proto",
}
