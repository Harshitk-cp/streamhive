// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: libs/proto/webrtc/webrtc.proto

package webrtc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebRTCService_HandleOffer_FullMethodName        = "/webrtc.WebRTCService/HandleOffer"
	WebRTCService_HandleICECandidate_FullMethodName = "/webrtc.WebRTCService/HandleICECandidate"
	WebRTCService_GetStreamInfo_FullMethodName      = "/webrtc.WebRTCService/GetStreamInfo"
	WebRTCService_RemoveStream_FullMethodName       = "/webrtc.WebRTCService/RemoveStream"
	WebRTCService_PushFrame_FullMethodName          = "/webrtc.WebRTCService/PushFrame"
)

// WebRTCServiceClient is the client API for WebRTCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WebRTCService handles WebRTC operations
type WebRTCServiceClient interface {
	// HandleOffer handles an SDP offer from a viewer
	HandleOffer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*AnswerResponse, error)
	// HandleICECandidate handles an ICE candidate from a viewer
	HandleICECandidate(ctx context.Context, in *ICECandidateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetStreamInfo gets information about a stream
	GetStreamInfo(ctx context.Context, in *GetStreamInfoRequest, opts ...grpc.CallOption) (*StreamInfo, error)
	// RemoveStream removes a stream
	RemoveStream(ctx context.Context, in *RemoveStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PushFrame pushes a frame to a stream
	PushFrame(ctx context.Context, in *PushFrameRequest, opts ...grpc.CallOption) (*PushFrameResponse, error)
}

type webRTCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebRTCServiceClient(cc grpc.ClientConnInterface) WebRTCServiceClient {
	return &webRTCServiceClient{cc}
}

func (c *webRTCServiceClient) HandleOffer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*AnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnswerResponse)
	err := c.cc.Invoke(ctx, WebRTCService_HandleOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) HandleICECandidate(ctx context.Context, in *ICECandidateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WebRTCService_HandleICECandidate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) GetStreamInfo(ctx context.Context, in *GetStreamInfoRequest, opts ...grpc.CallOption) (*StreamInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamInfo)
	err := c.cc.Invoke(ctx, WebRTCService_GetStreamInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) RemoveStream(ctx context.Context, in *RemoveStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WebRTCService_RemoveStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCServiceClient) PushFrame(ctx context.Context, in *PushFrameRequest, opts ...grpc.CallOption) (*PushFrameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushFrameResponse)
	err := c.cc.Invoke(ctx, WebRTCService_PushFrame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebRTCServiceServer is the server API for WebRTCService service.
// All implementations must embed UnimplementedWebRTCServiceServer
// for forward compatibility.
//
// WebRTCService handles WebRTC operations
type WebRTCServiceServer interface {
	// HandleOffer handles an SDP offer from a viewer
	HandleOffer(context.Context, *OfferRequest) (*AnswerResponse, error)
	// HandleICECandidate handles an ICE candidate from a viewer
	HandleICECandidate(context.Context, *ICECandidateRequest) (*emptypb.Empty, error)
	// GetStreamInfo gets information about a stream
	GetStreamInfo(context.Context, *GetStreamInfoRequest) (*StreamInfo, error)
	// RemoveStream removes a stream
	RemoveStream(context.Context, *RemoveStreamRequest) (*emptypb.Empty, error)
	// PushFrame pushes a frame to a stream
	PushFrame(context.Context, *PushFrameRequest) (*PushFrameResponse, error)
	mustEmbedUnimplementedWebRTCServiceServer()
}

// UnimplementedWebRTCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebRTCServiceServer struct{}

func (UnimplementedWebRTCServiceServer) HandleOffer(context.Context, *OfferRequest) (*AnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOffer not implemented")
}
func (UnimplementedWebRTCServiceServer) HandleICECandidate(context.Context, *ICECandidateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleICECandidate not implemented")
}
func (UnimplementedWebRTCServiceServer) GetStreamInfo(context.Context, *GetStreamInfoRequest) (*StreamInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamInfo not implemented")
}
func (UnimplementedWebRTCServiceServer) RemoveStream(context.Context, *RemoveStreamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStream not implemented")
}
func (UnimplementedWebRTCServiceServer) PushFrame(context.Context, *PushFrameRequest) (*PushFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFrame not implemented")
}
func (UnimplementedWebRTCServiceServer) mustEmbedUnimplementedWebRTCServiceServer() {}
func (UnimplementedWebRTCServiceServer) testEmbeddedByValue()                       {}

// UnsafeWebRTCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebRTCServiceServer will
// result in compilation errors.
type UnsafeWebRTCServiceServer interface {
	mustEmbedUnimplementedWebRTCServiceServer()
}

func RegisterWebRTCServiceServer(s grpc.ServiceRegistrar, srv WebRTCServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebRTCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebRTCService_ServiceDesc, srv)
}

func _WebRTCService_HandleOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).HandleOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_HandleOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).HandleOffer(ctx, req.(*OfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_HandleICECandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ICECandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).HandleICECandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_HandleICECandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).HandleICECandidate(ctx, req.(*ICECandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_GetStreamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).GetStreamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_GetStreamInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).GetStreamInfo(ctx, req.(*GetStreamInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_RemoveStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).RemoveStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_RemoveStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).RemoveStream(ctx, req.(*RemoveStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTCService_PushFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServiceServer).PushFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebRTCService_PushFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServiceServer).PushFrame(ctx, req.(*PushFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebRTCService_ServiceDesc is the grpc.ServiceDesc for WebRTCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebRTCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webrtc.WebRTCService",
	HandlerType: (*WebRTCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleOffer",
			Handler:    _WebRTCService_HandleOffer_Handler,
		},
		{
			MethodName: "HandleICECandidate",
			Handler:    _WebRTCService_HandleICECandidate_Handler,
		},
		{
			MethodName: "GetStreamInfo",
			Handler:    _WebRTCService_GetStreamInfo_Handler,
		},
		{
			MethodName: "RemoveStream",
			Handler:    _WebRTCService_RemoveStream_Handler,
		},
		{
			MethodName: "PushFrame",
			Handler:    _WebRTCService_PushFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/proto/webrtc/webrtc.proto",
}
