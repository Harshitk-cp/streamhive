syntax = "proto3";

package webrtc;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "libs/proto/webrtc";

// WebRTCService handles WebRTC operations
service WebRTCService {
  // HandleOffer handles an SDP offer from a viewer
  rpc HandleOffer(OfferRequest) returns (AnswerResponse);

  // HandleICECandidate handles an ICE candidate from a viewer
  rpc HandleICECandidate(ICECandidateRequest) returns (google.protobuf.Empty);

  // GetStreamInfo gets information about a stream
  rpc GetStreamInfo(GetStreamInfoRequest) returns (StreamInfo);

  // RemoveStream removes a stream
  rpc RemoveStream(RemoveStreamRequest) returns (google.protobuf.Empty);

  // PushFrame pushes a frame to a stream
  rpc PushFrame(PushFrameRequest) returns (PushFrameResponse);
}

// FrameType represents the type of media frame
enum FrameType {
  UNKNOWN = 0;
  VIDEO = 1;
  AUDIO = 2;
  METADATA = 3;
}

// PushFrameRequest is a request to push a frame to a stream
message PushFrameRequest {
  string stream_id = 1;
  string frame_id = 2;
  FrameType type = 3;
  bytes data = 4;
  google.protobuf.Timestamp timestamp = 5;
  bool is_key_frame = 6;
  int64 sequence = 7;
  map<string, string> metadata = 8;
}

// PushFrameResponse is a response to a PushFrame request
message PushFrameResponse {
  string status = 1;
}

// OfferRequest contains an SDP offer from a viewer
message OfferRequest {
  string stream_id = 1;
  string viewer_id = 2;
  string offer = 3;  // SDP offer
}

// AnswerResponse contains an SDP answer for a viewer
message AnswerResponse {
  string stream_id = 1;
  string viewer_id = 2;
  string answer = 3;  // SDP answer
}

// ICECandidateRequest contains an ICE candidate from a viewer
message ICECandidateRequest {
  string stream_id = 1;
  string viewer_id = 2;
  string candidate = 3;
  string sdp_mid = 4;
  uint32 sdp_mline_index = 5;
}

// GetStreamInfoRequest is a request to get information about a stream
message GetStreamInfoRequest {
  string stream_id = 1;
}

// StreamInfo contains information about a WebRTC stream
message StreamInfo {
  string stream_id = 1;
  string status = 2;
  int32 current_viewers = 3;
  int32 total_viewers = 4;
  int32 width = 5;
  int32 height = 6;
  float frame_rate = 7;
  int64 total_frames = 8;
}

// RemoveStreamRequest is a request to remove a stream
message RemoveStreamRequest {
  string stream_id = 1;
}
