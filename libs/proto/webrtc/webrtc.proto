syntax = "proto3";

package webrtc;

option go_package = "libs/proto/webrtc";

// WebRTC service for managing WebRTC streams
service WebRTCService {
  // Create a new stream
  rpc CreateStream(CreateStreamRequest) returns (CreateStreamResponse);

  // Destroy a stream
  rpc DestroyStream(DestroyStreamRequest) returns (DestroyStreamResponse);

  // Add a video frame to a stream
  rpc AddVideoFrame(AddVideoFrameRequest) returns (AddVideoFrameResponse);

  // Add an audio frame to a stream
  rpc AddAudioFrame(AddAudioFrameRequest) returns (AddAudioFrameResponse);

  // Get stats for a stream
  rpc GetStreamStats(GetStreamStatsRequest) returns (GetStreamStatsResponse);

  // Handle SDP offer from a viewer
  rpc HandleOffer(SDPOfferRequest) returns (SDPAnswerResponse);

  // Handle ICE candidate from a viewer
  rpc HandleICECandidate(ICECandidateRequest) returns (ICECandidateResponse);

  // Restart ICE for a peer connection
  rpc RestartICE(RestartICERequest) returns (RestartICEResponse);
}

// Create stream request
message CreateStreamRequest {
  string stream_id = 1;
  string session_id = 2;
}

// Create stream response
message CreateStreamResponse {
  string stream_id = 1;
  string session_id = 2;
  string node_id = 3;
}

// Destroy stream request
message DestroyStreamRequest {
  string stream_id = 1;
  string session_id = 2;
}

// Destroy stream response
message DestroyStreamResponse {
  bool success = 1;
}

// Add video frame request
message AddVideoFrameRequest {
  string stream_id = 1;
  bytes frame_data = 2;
  bool is_key_frame = 3;
  int64 timestamp = 4;
}

// Add video frame response
message AddVideoFrameResponse {
  bool success = 1;
  bool dropped = 2;
  int32 queue_depth = 3;
}

// Add audio frame request
message AddAudioFrameRequest {
  string stream_id = 1;
  bytes frame_data = 2;
  int64 timestamp = 3;
}

// Add audio frame response
message AddAudioFrameResponse {
  bool success = 1;
  bool dropped = 2;
  int32 queue_depth = 3;
}

// Get stream stats request
message GetStreamStatsRequest {
  string stream_id = 1;
}

// Get stream stats response
message GetStreamStatsResponse {
  string stream_id = 1;
  int32 active_connections = 2;
  int32 video_queue_depth = 3;
  int32 audio_queue_depth = 4;
}

// SDP offer request
message SDPOfferRequest {
  string stream_id = 1;
  string session_id = 2;
  string user_id = 3;
  string sdp = 4;
}

// SDP answer response
message SDPAnswerResponse {
  string stream_id = 1;
  string session_id = 2;
  string user_id = 3;
  string sdp = 4;
}

// ICE candidate request
message ICECandidateRequest {
  string stream_id = 1;
  string user_id = 2;
  string candidate = 3;
  string sdp_mid = 4;
  uint32 sdp_m_line_index = 5;
}

// ICE candidate response
message ICECandidateResponse {
  bool success = 1;
}

// Restart ICE request
message RestartICERequest {
  string stream_id = 1;
  string user_id = 2;
}

// Restart ICE response
message RestartICEResponse {
  bool success = 1;
  string error = 2;
}

// Signaling service for managing WebRTC signaling
service SignalingService {
  // Register a stream
  rpc RegisterStream(RegisterStreamRequest) returns (RegisterStreamResponse);

  // Unregister a stream
  rpc UnregisterStream(UnregisterStreamRequest) returns (UnregisterStreamResponse);

  // Register a WebRTC node
  rpc RegisterWebRTCNode(RegisterWebRTCNodeRequest) returns (RegisterWebRTCNodeResponse);

  // Send a heartbeat from a WebRTC node
  rpc SendNodeHeartbeat(NodeHeartbeatRequest) returns (NodeHeartbeatResponse);

  // Forward signaling messages to/from clients
  rpc ForwardSignalingMessage(SignalingForwardRequest) returns (SignalingForwardResponse);

  // Register a client
  rpc RegisterClient(RegisterClientRequest) returns (RegisterClientResponse);

  // Unregister a client
  rpc UnregisterClient(UnregisterClientRequest) returns (UnregisterClientResponse);
}

// Register stream request
message RegisterStreamRequest {
  string stream_id = 1;
  string session_id = 2;
  string node_id = 3;
}

// Register stream response
message RegisterStreamResponse {
  bool success = 1;
}

// Unregister stream request
message UnregisterStreamRequest {
  string stream_id = 1;
  string session_id = 2;
  string node_id = 3;
}

// Unregister stream response
message UnregisterStreamResponse {
  bool success = 1;
}

// Register WebRTC node request
message RegisterWebRTCNodeRequest {
  string node_id = 1;
  string address = 2;
  repeated string capabilities = 3;
  int32 max_streams = 4;
}

// Register WebRTC node response
message RegisterWebRTCNodeResponse {
  bool success = 1;
}

// WebRTC node heartbeat request
message NodeHeartbeatRequest {
  string node_id = 1;
  int32 active_streams = 2;
  int32 active_connections = 3;
  float cpu_usage = 4;
  float memory_usage = 5;
}

// WebRTC node heartbeat response
message NodeHeartbeatResponse {
  bool success = 1;
  int64 server_time = 2;
}

// Signaling forward request
message SignalingForwardRequest {
  string stream_id = 1;
  string sender_id = 2;
  string recipient_id = 3;
  string message_type = 4;
  bytes payload = 5;
}

// Signaling forward response
message SignalingForwardResponse {
  bool success = 1;
  string error = 2;
}

// Register client request
message RegisterClientRequest {
  string client_id = 1;
  string stream_id = 2;
  string session_id = 3;
}

// Register client response
message RegisterClientResponse {
  bool success = 1;
  string error = 2;
}

// Unregister client request
message UnregisterClientRequest {
  string client_id = 1;
  string stream_id = 2;
}

// Unregister client response
message UnregisterClientResponse {
  bool success = 1;
}
