// libs/proto/webrtc/webrtc.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.2
// source: libs/proto/webrtc/webrtc.proto

package webrtc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Create stream request
type CreateStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateStreamRequest) Reset() {
	*x = CreateStreamRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamRequest) ProtoMessage() {}

func (x *CreateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{0}
}

func (x *CreateStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *CreateStreamRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Create stream response
type CreateStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	NodeId        string                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateStreamResponse) Reset() {
	*x = CreateStreamResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamResponse) ProtoMessage() {}

func (x *CreateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{1}
}

func (x *CreateStreamResponse) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *CreateStreamResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateStreamResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// Destroy stream request
type DestroyStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyStreamRequest) Reset() {
	*x = DestroyStreamRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyStreamRequest) ProtoMessage() {}

func (x *DestroyStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyStreamRequest.ProtoReflect.Descriptor instead.
func (*DestroyStreamRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{2}
}

func (x *DestroyStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *DestroyStreamRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Destroy stream response
type DestroyStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyStreamResponse) Reset() {
	*x = DestroyStreamResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyStreamResponse) ProtoMessage() {}

func (x *DestroyStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyStreamResponse.ProtoReflect.Descriptor instead.
func (*DestroyStreamResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{3}
}

func (x *DestroyStreamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Add video frame request
type AddVideoFrameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	FrameData     []byte                 `protobuf:"bytes,2,opt,name=frame_data,json=frameData,proto3" json:"frame_data,omitempty"`
	IsKeyFrame    bool                   `protobuf:"varint,3,opt,name=is_key_frame,json=isKeyFrame,proto3" json:"is_key_frame,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddVideoFrameRequest) Reset() {
	*x = AddVideoFrameRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddVideoFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVideoFrameRequest) ProtoMessage() {}

func (x *AddVideoFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVideoFrameRequest.ProtoReflect.Descriptor instead.
func (*AddVideoFrameRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{4}
}

func (x *AddVideoFrameRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *AddVideoFrameRequest) GetFrameData() []byte {
	if x != nil {
		return x.FrameData
	}
	return nil
}

func (x *AddVideoFrameRequest) GetIsKeyFrame() bool {
	if x != nil {
		return x.IsKeyFrame
	}
	return false
}

func (x *AddVideoFrameRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Add video frame response
type AddVideoFrameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Dropped       bool                   `protobuf:"varint,2,opt,name=dropped,proto3" json:"dropped,omitempty"`
	QueueDepth    int32                  `protobuf:"varint,3,opt,name=queue_depth,json=queueDepth,proto3" json:"queue_depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddVideoFrameResponse) Reset() {
	*x = AddVideoFrameResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddVideoFrameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVideoFrameResponse) ProtoMessage() {}

func (x *AddVideoFrameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVideoFrameResponse.ProtoReflect.Descriptor instead.
func (*AddVideoFrameResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{5}
}

func (x *AddVideoFrameResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddVideoFrameResponse) GetDropped() bool {
	if x != nil {
		return x.Dropped
	}
	return false
}

func (x *AddVideoFrameResponse) GetQueueDepth() int32 {
	if x != nil {
		return x.QueueDepth
	}
	return 0
}

// Add audio frame request
type AddAudioFrameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	FrameData     []byte                 `protobuf:"bytes,2,opt,name=frame_data,json=frameData,proto3" json:"frame_data,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAudioFrameRequest) Reset() {
	*x = AddAudioFrameRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAudioFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAudioFrameRequest) ProtoMessage() {}

func (x *AddAudioFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAudioFrameRequest.ProtoReflect.Descriptor instead.
func (*AddAudioFrameRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{6}
}

func (x *AddAudioFrameRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *AddAudioFrameRequest) GetFrameData() []byte {
	if x != nil {
		return x.FrameData
	}
	return nil
}

func (x *AddAudioFrameRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Add audio frame response
type AddAudioFrameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Dropped       bool                   `protobuf:"varint,2,opt,name=dropped,proto3" json:"dropped,omitempty"`
	QueueDepth    int32                  `protobuf:"varint,3,opt,name=queue_depth,json=queueDepth,proto3" json:"queue_depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAudioFrameResponse) Reset() {
	*x = AddAudioFrameResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAudioFrameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAudioFrameResponse) ProtoMessage() {}

func (x *AddAudioFrameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAudioFrameResponse.ProtoReflect.Descriptor instead.
func (*AddAudioFrameResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{7}
}

func (x *AddAudioFrameResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddAudioFrameResponse) GetDropped() bool {
	if x != nil {
		return x.Dropped
	}
	return false
}

func (x *AddAudioFrameResponse) GetQueueDepth() int32 {
	if x != nil {
		return x.QueueDepth
	}
	return 0
}

// Get stream stats request
type GetStreamStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamStatsRequest) Reset() {
	*x = GetStreamStatsRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamStatsRequest) ProtoMessage() {}

func (x *GetStreamStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStreamStatsRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{8}
}

func (x *GetStreamStatsRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

// Get stream stats response
type GetStreamStatsResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	StreamId          string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ActiveConnections int32                  `protobuf:"varint,2,opt,name=active_connections,json=activeConnections,proto3" json:"active_connections,omitempty"`
	VideoQueueDepth   int32                  `protobuf:"varint,3,opt,name=video_queue_depth,json=videoQueueDepth,proto3" json:"video_queue_depth,omitempty"`
	AudioQueueDepth   int32                  `protobuf:"varint,4,opt,name=audio_queue_depth,json=audioQueueDepth,proto3" json:"audio_queue_depth,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetStreamStatsResponse) Reset() {
	*x = GetStreamStatsResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamStatsResponse) ProtoMessage() {}

func (x *GetStreamStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStreamStatsResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{9}
}

func (x *GetStreamStatsResponse) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *GetStreamStatsResponse) GetActiveConnections() int32 {
	if x != nil {
		return x.ActiveConnections
	}
	return 0
}

func (x *GetStreamStatsResponse) GetVideoQueueDepth() int32 {
	if x != nil {
		return x.VideoQueueDepth
	}
	return 0
}

func (x *GetStreamStatsResponse) GetAudioQueueDepth() int32 {
	if x != nil {
		return x.AudioQueueDepth
	}
	return 0
}

// SDP offer request
type SDPOfferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Sdp           string                 `protobuf:"bytes,4,opt,name=sdp,proto3" json:"sdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SDPOfferRequest) Reset() {
	*x = SDPOfferRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SDPOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDPOfferRequest) ProtoMessage() {}

func (x *SDPOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDPOfferRequest.ProtoReflect.Descriptor instead.
func (*SDPOfferRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{10}
}

func (x *SDPOfferRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SDPOfferRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SDPOfferRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SDPOfferRequest) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

// SDP answer response
type SDPAnswerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Sdp           string                 `protobuf:"bytes,4,opt,name=sdp,proto3" json:"sdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SDPAnswerResponse) Reset() {
	*x = SDPAnswerResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SDPAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDPAnswerResponse) ProtoMessage() {}

func (x *SDPAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDPAnswerResponse.ProtoReflect.Descriptor instead.
func (*SDPAnswerResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{11}
}

func (x *SDPAnswerResponse) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SDPAnswerResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SDPAnswerResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SDPAnswerResponse) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

// ICE candidate request
type ICECandidateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Candidate     string                 `protobuf:"bytes,3,opt,name=candidate,proto3" json:"candidate,omitempty"`
	SdpMid        string                 `protobuf:"bytes,4,opt,name=sdp_mid,json=sdpMid,proto3" json:"sdp_mid,omitempty"`
	SdpMLineIndex uint32                 `protobuf:"varint,5,opt,name=sdp_m_line_index,json=sdpMLineIndex,proto3" json:"sdp_m_line_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ICECandidateRequest) Reset() {
	*x = ICECandidateRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICECandidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICECandidateRequest) ProtoMessage() {}

func (x *ICECandidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICECandidateRequest.ProtoReflect.Descriptor instead.
func (*ICECandidateRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{12}
}

func (x *ICECandidateRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *ICECandidateRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ICECandidateRequest) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *ICECandidateRequest) GetSdpMid() string {
	if x != nil {
		return x.SdpMid
	}
	return ""
}

func (x *ICECandidateRequest) GetSdpMLineIndex() uint32 {
	if x != nil {
		return x.SdpMLineIndex
	}
	return 0
}

// ICE candidate response
type ICECandidateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ICECandidateResponse) Reset() {
	*x = ICECandidateResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICECandidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICECandidateResponse) ProtoMessage() {}

func (x *ICECandidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICECandidateResponse.ProtoReflect.Descriptor instead.
func (*ICECandidateResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{13}
}

func (x *ICECandidateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Register stream request
type RegisterStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	NodeId        string                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterStreamRequest) Reset() {
	*x = RegisterStreamRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterStreamRequest) ProtoMessage() {}

func (x *RegisterStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterStreamRequest.ProtoReflect.Descriptor instead.
func (*RegisterStreamRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{14}
}

func (x *RegisterStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *RegisterStreamRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RegisterStreamRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// Register stream response
type RegisterStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterStreamResponse) Reset() {
	*x = RegisterStreamResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterStreamResponse) ProtoMessage() {}

func (x *RegisterStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterStreamResponse.ProtoReflect.Descriptor instead.
func (*RegisterStreamResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{15}
}

func (x *RegisterStreamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Unregister stream request
type UnregisterStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	NodeId        string                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnregisterStreamRequest) Reset() {
	*x = UnregisterStreamRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnregisterStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterStreamRequest) ProtoMessage() {}

func (x *UnregisterStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterStreamRequest.ProtoReflect.Descriptor instead.
func (*UnregisterStreamRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{16}
}

func (x *UnregisterStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UnregisterStreamRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UnregisterStreamRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// Unregister stream response
type UnregisterStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnregisterStreamResponse) Reset() {
	*x = UnregisterStreamResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnregisterStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterStreamResponse) ProtoMessage() {}

func (x *UnregisterStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterStreamResponse.ProtoReflect.Descriptor instead.
func (*UnregisterStreamResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{17}
}

func (x *UnregisterStreamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_libs_proto_webrtc_webrtc_proto protoreflect.FileDescriptor

const file_libs_proto_webrtc_webrtc_proto_rawDesc = "" +
	"\n" +
	"\x1elibs/proto/webrtc/webrtc.proto\x12\x06webrtc\"Q\n" +
	"\x13CreateStreamRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\"k\n" +
	"\x14CreateStreamResponse\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\"R\n" +
	"\x14DestroyStreamRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\"1\n" +
	"\x15DestroyStreamResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\x92\x01\n" +
	"\x14AddVideoFrameRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x1d\n" +
	"\n" +
	"frame_data\x18\x02 \x01(\fR\tframeData\x12 \n" +
	"\fis_key_frame\x18\x03 \x01(\bR\n" +
	"isKeyFrame\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\"l\n" +
	"\x15AddVideoFrameResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\adropped\x18\x02 \x01(\bR\adropped\x12\x1f\n" +
	"\vqueue_depth\x18\x03 \x01(\x05R\n" +
	"queueDepth\"p\n" +
	"\x14AddAudioFrameRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x1d\n" +
	"\n" +
	"frame_data\x18\x02 \x01(\fR\tframeData\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"l\n" +
	"\x15AddAudioFrameResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\adropped\x18\x02 \x01(\bR\adropped\x12\x1f\n" +
	"\vqueue_depth\x18\x03 \x01(\x05R\n" +
	"queueDepth\"4\n" +
	"\x15GetStreamStatsRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\"\xbc\x01\n" +
	"\x16GetStreamStatsResponse\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12-\n" +
	"\x12active_connections\x18\x02 \x01(\x05R\x11activeConnections\x12*\n" +
	"\x11video_queue_depth\x18\x03 \x01(\x05R\x0fvideoQueueDepth\x12*\n" +
	"\x11audio_queue_depth\x18\x04 \x01(\x05R\x0faudioQueueDepth\"x\n" +
	"\x0fSDPOfferRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x10\n" +
	"\x03sdp\x18\x04 \x01(\tR\x03sdp\"z\n" +
	"\x11SDPAnswerResponse\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x10\n" +
	"\x03sdp\x18\x04 \x01(\tR\x03sdp\"\xab\x01\n" +
	"\x13ICECandidateRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1c\n" +
	"\tcandidate\x18\x03 \x01(\tR\tcandidate\x12\x17\n" +
	"\asdp_mid\x18\x04 \x01(\tR\x06sdpMid\x12'\n" +
	"\x10sdp_m_line_index\x18\x05 \x01(\rR\rsdpMLineIndex\"0\n" +
	"\x14ICECandidateResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"l\n" +
	"\x15RegisterStreamRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\"2\n" +
	"\x16RegisterStreamResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"n\n" +
	"\x17UnregisterStreamRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x17\n" +
	"\anode_id\x18\x03 \x01(\tR\x06nodeId\"4\n" +
	"\x18UnregisterStreamResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2\xa9\x04\n" +
	"\rWebRTCService\x12I\n" +
	"\fCreateStream\x12\x1b.webrtc.CreateStreamRequest\x1a\x1c.webrtc.CreateStreamResponse\x12L\n" +
	"\rDestroyStream\x12\x1c.webrtc.DestroyStreamRequest\x1a\x1d.webrtc.DestroyStreamResponse\x12L\n" +
	"\rAddVideoFrame\x12\x1c.webrtc.AddVideoFrameRequest\x1a\x1d.webrtc.AddVideoFrameResponse\x12L\n" +
	"\rAddAudioFrame\x12\x1c.webrtc.AddAudioFrameRequest\x1a\x1d.webrtc.AddAudioFrameResponse\x12O\n" +
	"\x0eGetStreamStats\x12\x1d.webrtc.GetStreamStatsRequest\x1a\x1e.webrtc.GetStreamStatsResponse\x12A\n" +
	"\vHandleOffer\x12\x17.webrtc.SDPOfferRequest\x1a\x19.webrtc.SDPAnswerResponse\x12O\n" +
	"\x12HandleICECandidate\x12\x1b.webrtc.ICECandidateRequest\x1a\x1c.webrtc.ICECandidateResponse2\xba\x01\n" +
	"\x10SignalingService\x12O\n" +
	"\x0eRegisterStream\x12\x1d.webrtc.RegisterStreamRequest\x1a\x1e.webrtc.RegisterStreamResponse\x12U\n" +
	"\x10UnregisterStream\x12\x1f.webrtc.UnregisterStreamRequest\x1a .webrtc.UnregisterStreamResponseB\x13Z\x11libs/proto/webrtcb\x06proto3"

var (
	file_libs_proto_webrtc_webrtc_proto_rawDescOnce sync.Once
	file_libs_proto_webrtc_webrtc_proto_rawDescData []byte
)

func file_libs_proto_webrtc_webrtc_proto_rawDescGZIP() []byte {
	file_libs_proto_webrtc_webrtc_proto_rawDescOnce.Do(func() {
		file_libs_proto_webrtc_webrtc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_libs_proto_webrtc_webrtc_proto_rawDesc), len(file_libs_proto_webrtc_webrtc_proto_rawDesc)))
	})
	return file_libs_proto_webrtc_webrtc_proto_rawDescData
}

var file_libs_proto_webrtc_webrtc_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_libs_proto_webrtc_webrtc_proto_goTypes = []any{
	(*CreateStreamRequest)(nil),      // 0: webrtc.CreateStreamRequest
	(*CreateStreamResponse)(nil),     // 1: webrtc.CreateStreamResponse
	(*DestroyStreamRequest)(nil),     // 2: webrtc.DestroyStreamRequest
	(*DestroyStreamResponse)(nil),    // 3: webrtc.DestroyStreamResponse
	(*AddVideoFrameRequest)(nil),     // 4: webrtc.AddVideoFrameRequest
	(*AddVideoFrameResponse)(nil),    // 5: webrtc.AddVideoFrameResponse
	(*AddAudioFrameRequest)(nil),     // 6: webrtc.AddAudioFrameRequest
	(*AddAudioFrameResponse)(nil),    // 7: webrtc.AddAudioFrameResponse
	(*GetStreamStatsRequest)(nil),    // 8: webrtc.GetStreamStatsRequest
	(*GetStreamStatsResponse)(nil),   // 9: webrtc.GetStreamStatsResponse
	(*SDPOfferRequest)(nil),          // 10: webrtc.SDPOfferRequest
	(*SDPAnswerResponse)(nil),        // 11: webrtc.SDPAnswerResponse
	(*ICECandidateRequest)(nil),      // 12: webrtc.ICECandidateRequest
	(*ICECandidateResponse)(nil),     // 13: webrtc.ICECandidateResponse
	(*RegisterStreamRequest)(nil),    // 14: webrtc.RegisterStreamRequest
	(*RegisterStreamResponse)(nil),   // 15: webrtc.RegisterStreamResponse
	(*UnregisterStreamRequest)(nil),  // 16: webrtc.UnregisterStreamRequest
	(*UnregisterStreamResponse)(nil), // 17: webrtc.UnregisterStreamResponse
}
var file_libs_proto_webrtc_webrtc_proto_depIdxs = []int32{
	0,  // 0: webrtc.WebRTCService.CreateStream:input_type -> webrtc.CreateStreamRequest
	2,  // 1: webrtc.WebRTCService.DestroyStream:input_type -> webrtc.DestroyStreamRequest
	4,  // 2: webrtc.WebRTCService.AddVideoFrame:input_type -> webrtc.AddVideoFrameRequest
	6,  // 3: webrtc.WebRTCService.AddAudioFrame:input_type -> webrtc.AddAudioFrameRequest
	8,  // 4: webrtc.WebRTCService.GetStreamStats:input_type -> webrtc.GetStreamStatsRequest
	10, // 5: webrtc.WebRTCService.HandleOffer:input_type -> webrtc.SDPOfferRequest
	12, // 6: webrtc.WebRTCService.HandleICECandidate:input_type -> webrtc.ICECandidateRequest
	14, // 7: webrtc.SignalingService.RegisterStream:input_type -> webrtc.RegisterStreamRequest
	16, // 8: webrtc.SignalingService.UnregisterStream:input_type -> webrtc.UnregisterStreamRequest
	1,  // 9: webrtc.WebRTCService.CreateStream:output_type -> webrtc.CreateStreamResponse
	3,  // 10: webrtc.WebRTCService.DestroyStream:output_type -> webrtc.DestroyStreamResponse
	5,  // 11: webrtc.WebRTCService.AddVideoFrame:output_type -> webrtc.AddVideoFrameResponse
	7,  // 12: webrtc.WebRTCService.AddAudioFrame:output_type -> webrtc.AddAudioFrameResponse
	9,  // 13: webrtc.WebRTCService.GetStreamStats:output_type -> webrtc.GetStreamStatsResponse
	11, // 14: webrtc.WebRTCService.HandleOffer:output_type -> webrtc.SDPAnswerResponse
	13, // 15: webrtc.WebRTCService.HandleICECandidate:output_type -> webrtc.ICECandidateResponse
	15, // 16: webrtc.SignalingService.RegisterStream:output_type -> webrtc.RegisterStreamResponse
	17, // 17: webrtc.SignalingService.UnregisterStream:output_type -> webrtc.UnregisterStreamResponse
	9,  // [9:18] is the sub-list for method output_type
	0,  // [0:9] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_libs_proto_webrtc_webrtc_proto_init() }
func file_libs_proto_webrtc_webrtc_proto_init() {
	if File_libs_proto_webrtc_webrtc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_libs_proto_webrtc_webrtc_proto_rawDesc), len(file_libs_proto_webrtc_webrtc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_libs_proto_webrtc_webrtc_proto_goTypes,
		DependencyIndexes: file_libs_proto_webrtc_webrtc_proto_depIdxs,
		MessageInfos:      file_libs_proto_webrtc_webrtc_proto_msgTypes,
	}.Build()
	File_libs_proto_webrtc_webrtc_proto = out.File
	file_libs_proto_webrtc_webrtc_proto_goTypes = nil
	file_libs_proto_webrtc_webrtc_proto_depIdxs = nil
}
