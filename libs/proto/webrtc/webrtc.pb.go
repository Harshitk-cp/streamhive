// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.2
// source: libs/proto/webrtc/webrtc.proto

package webrtc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Frame type enumeration
type FrameType int32

const (
	FrameType_UNKNOWN  FrameType = 0
	FrameType_VIDEO    FrameType = 1
	FrameType_AUDIO    FrameType = 2
	FrameType_METADATA FrameType = 3
)

// Enum value maps for FrameType.
var (
	FrameType_name = map[int32]string{
		0: "UNKNOWN",
		1: "VIDEO",
		2: "AUDIO",
		3: "METADATA",
	}
	FrameType_value = map[string]int32{
		"UNKNOWN":  0,
		"VIDEO":    1,
		"AUDIO":    2,
		"METADATA": 3,
	}
)

func (x FrameType) Enum() *FrameType {
	p := new(FrameType)
	*p = x
	return p
}

func (x FrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_libs_proto_webrtc_webrtc_proto_enumTypes[0].Descriptor()
}

func (FrameType) Type() protoreflect.EnumType {
	return &file_libs_proto_webrtc_webrtc_proto_enumTypes[0]
}

func (x FrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrameType.Descriptor instead.
func (FrameType) EnumDescriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{0}
}

// Frame represents a video or audio frame
type Frame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	FrameId       string                 `protobuf:"bytes,2,opt,name=frame_id,json=frameId,proto3" json:"frame_id,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type          FrameType              `protobuf:"varint,4,opt,name=type,proto3,enum=webrtc.FrameType" json:"type,omitempty"`
	Data          []byte                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sequence      int64                  `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	IsKeyFrame    bool                   `protobuf:"varint,8,opt,name=is_key_frame,json=isKeyFrame,proto3" json:"is_key_frame,omitempty"`
	Duration      int32                  `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"` // Duration in milliseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Frame) Reset() {
	*x = Frame{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{0}
}

func (x *Frame) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *Frame) GetFrameId() string {
	if x != nil {
		return x.FrameId
	}
	return ""
}

func (x *Frame) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Frame) GetType() FrameType {
	if x != nil {
		return x.Type
	}
	return FrameType_UNKNOWN
}

func (x *Frame) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Frame) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Frame) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Frame) GetIsKeyFrame() bool {
	if x != nil {
		return x.IsKeyFrame
	}
	return false
}

func (x *Frame) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// SendFramesRequest is used to send frames to WebRTC
type SendFramesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Frames        []*Frame               `protobuf:"bytes,2,rep,name=frames,proto3" json:"frames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendFramesRequest) Reset() {
	*x = SendFramesRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendFramesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFramesRequest) ProtoMessage() {}

func (x *SendFramesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFramesRequest.ProtoReflect.Descriptor instead.
func (*SendFramesRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{1}
}

func (x *SendFramesRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SendFramesRequest) GetFrames() []*Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

// SendFramesResponse contains the result of sending frames
type SendFramesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendFramesResponse) Reset() {
	*x = SendFramesResponse{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendFramesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFramesResponse) ProtoMessage() {}

func (x *SendFramesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFramesResponse.ProtoReflect.Descriptor instead.
func (*SendFramesResponse) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{2}
}

func (x *SendFramesResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SendFramesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ICEServer represents an ICE server configuration
type ICEServer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Credential    string                 `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ICEServer) Reset() {
	*x = ICEServer{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICEServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICEServer) ProtoMessage() {}

func (x *ICEServer) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICEServer.ProtoReflect.Descriptor instead.
func (*ICEServer) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{3}
}

func (x *ICEServer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ICEServer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ICEServer) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

// WebRTCConfig represents the configuration for WebRTC
type WebRTCConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	StreamId         string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	IceServers       []*ICEServer           `protobuf:"bytes,2,rep,name=ice_servers,json=iceServers,proto3" json:"ice_servers,omitempty"`
	TrickleIce       bool                   `protobuf:"varint,3,opt,name=trickle_ice,json=trickleIce,proto3" json:"trickle_ice,omitempty"`
	MaxBitrate       int32                  `protobuf:"varint,4,opt,name=max_bitrate,json=maxBitrate,proto3" json:"max_bitrate,omitempty"`
	MaxFramerate     int32                  `protobuf:"varint,5,opt,name=max_framerate,json=maxFramerate,proto3" json:"max_framerate,omitempty"`
	AdditionalParams map[string]string      `protobuf:"bytes,6,rep,name=additional_params,json=additionalParams,proto3" json:"additional_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WebRTCConfig) Reset() {
	*x = WebRTCConfig{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebRTCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCConfig) ProtoMessage() {}

func (x *WebRTCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCConfig.ProtoReflect.Descriptor instead.
func (*WebRTCConfig) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{4}
}

func (x *WebRTCConfig) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *WebRTCConfig) GetIceServers() []*ICEServer {
	if x != nil {
		return x.IceServers
	}
	return nil
}

func (x *WebRTCConfig) GetTrickleIce() bool {
	if x != nil {
		return x.TrickleIce
	}
	return false
}

func (x *WebRTCConfig) GetMaxBitrate() int32 {
	if x != nil {
		return x.MaxBitrate
	}
	return 0
}

func (x *WebRTCConfig) GetMaxFramerate() int32 {
	if x != nil {
		return x.MaxFramerate
	}
	return 0
}

func (x *WebRTCConfig) GetAdditionalParams() map[string]string {
	if x != nil {
		return x.AdditionalParams
	}
	return nil
}

// GetWebRTCConfigRequest is used to get the WebRTC configuration for a stream
type GetWebRTCConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWebRTCConfigRequest) Reset() {
	*x = GetWebRTCConfigRequest{}
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWebRTCConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebRTCConfigRequest) ProtoMessage() {}

func (x *GetWebRTCConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_libs_proto_webrtc_webrtc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebRTCConfigRequest.ProtoReflect.Descriptor instead.
func (*GetWebRTCConfigRequest) Descriptor() ([]byte, []int) {
	return file_libs_proto_webrtc_webrtc_proto_rawDescGZIP(), []int{5}
}

func (x *GetWebRTCConfigRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

var File_libs_proto_webrtc_webrtc_proto protoreflect.FileDescriptor

const file_libs_proto_webrtc_webrtc_proto_rawDesc = "" +
	"\n" +
	"\x1elibs/proto/webrtc/webrtc.proto\x12\x06webrtc\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\"\x84\x03\n" +
	"\x05Frame\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12\x19\n" +
	"\bframe_id\x18\x02 \x01(\tR\aframeId\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12%\n" +
	"\x04type\x18\x04 \x01(\x0e2\x11.webrtc.FrameTypeR\x04type\x12\x12\n" +
	"\x04data\x18\x05 \x01(\fR\x04data\x127\n" +
	"\bmetadata\x18\x06 \x03(\v2\x1b.webrtc.Frame.MetadataEntryR\bmetadata\x12\x1a\n" +
	"\bsequence\x18\a \x01(\x03R\bsequence\x12 \n" +
	"\fis_key_frame\x18\b \x01(\bR\n" +
	"isKeyFrame\x12\x1a\n" +
	"\bduration\x18\t \x01(\x05R\bduration\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"W\n" +
	"\x11SendFramesRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x12%\n" +
	"\x06frames\x18\x02 \x03(\v2\r.webrtc.FrameR\x06frames\"B\n" +
	"\x12SendFramesResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"Y\n" +
	"\tICEServer\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1e\n" +
	"\n" +
	"credential\x18\x03 \x01(\tR\n" +
	"credential\"\xe4\x02\n" +
	"\fWebRTCConfig\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId\x122\n" +
	"\vice_servers\x18\x02 \x03(\v2\x11.webrtc.ICEServerR\n" +
	"iceServers\x12\x1f\n" +
	"\vtrickle_ice\x18\x03 \x01(\bR\n" +
	"trickleIce\x12\x1f\n" +
	"\vmax_bitrate\x18\x04 \x01(\x05R\n" +
	"maxBitrate\x12#\n" +
	"\rmax_framerate\x18\x05 \x01(\x05R\fmaxFramerate\x12W\n" +
	"\x11additional_params\x18\x06 \x03(\v2*.webrtc.WebRTCConfig.AdditionalParamsEntryR\x10additionalParams\x1aC\n" +
	"\x15AdditionalParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"5\n" +
	"\x16GetWebRTCConfigRequest\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\tR\bstreamId*<\n" +
	"\tFrameType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\t\n" +
	"\x05VIDEO\x10\x01\x12\t\n" +
	"\x05AUDIO\x10\x02\x12\f\n" +
	"\bMETADATA\x10\x032\xe1\x01\n" +
	"\rWebRTCService\x12C\n" +
	"\n" +
	"SendFrames\x12\x19.webrtc.SendFramesRequest\x1a\x1a.webrtc.SendFramesResponse\x12G\n" +
	"\x0fGetWebRTCConfig\x12\x1e.webrtc.GetWebRTCConfigRequest\x1a\x14.webrtc.WebRTCConfig\x12B\n" +
	"\x12UpdateWebRTCConfig\x12\x14.webrtc.WebRTCConfig\x1a\x16.google.protobuf.EmptyB\x13Z\x11libs/proto/webrtcb\x06proto3"

var (
	file_libs_proto_webrtc_webrtc_proto_rawDescOnce sync.Once
	file_libs_proto_webrtc_webrtc_proto_rawDescData []byte
)

func file_libs_proto_webrtc_webrtc_proto_rawDescGZIP() []byte {
	file_libs_proto_webrtc_webrtc_proto_rawDescOnce.Do(func() {
		file_libs_proto_webrtc_webrtc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_libs_proto_webrtc_webrtc_proto_rawDesc), len(file_libs_proto_webrtc_webrtc_proto_rawDesc)))
	})
	return file_libs_proto_webrtc_webrtc_proto_rawDescData
}

var file_libs_proto_webrtc_webrtc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_libs_proto_webrtc_webrtc_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_libs_proto_webrtc_webrtc_proto_goTypes = []any{
	(FrameType)(0),                 // 0: webrtc.FrameType
	(*Frame)(nil),                  // 1: webrtc.Frame
	(*SendFramesRequest)(nil),      // 2: webrtc.SendFramesRequest
	(*SendFramesResponse)(nil),     // 3: webrtc.SendFramesResponse
	(*ICEServer)(nil),              // 4: webrtc.ICEServer
	(*WebRTCConfig)(nil),           // 5: webrtc.WebRTCConfig
	(*GetWebRTCConfigRequest)(nil), // 6: webrtc.GetWebRTCConfigRequest
	nil,                            // 7: webrtc.Frame.MetadataEntry
	nil,                            // 8: webrtc.WebRTCConfig.AdditionalParamsEntry
	(*timestamppb.Timestamp)(nil),  // 9: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 10: google.protobuf.Empty
}
var file_libs_proto_webrtc_webrtc_proto_depIdxs = []int32{
	9,  // 0: webrtc.Frame.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: webrtc.Frame.type:type_name -> webrtc.FrameType
	7,  // 2: webrtc.Frame.metadata:type_name -> webrtc.Frame.MetadataEntry
	1,  // 3: webrtc.SendFramesRequest.frames:type_name -> webrtc.Frame
	4,  // 4: webrtc.WebRTCConfig.ice_servers:type_name -> webrtc.ICEServer
	8,  // 5: webrtc.WebRTCConfig.additional_params:type_name -> webrtc.WebRTCConfig.AdditionalParamsEntry
	2,  // 6: webrtc.WebRTCService.SendFrames:input_type -> webrtc.SendFramesRequest
	6,  // 7: webrtc.WebRTCService.GetWebRTCConfig:input_type -> webrtc.GetWebRTCConfigRequest
	5,  // 8: webrtc.WebRTCService.UpdateWebRTCConfig:input_type -> webrtc.WebRTCConfig
	3,  // 9: webrtc.WebRTCService.SendFrames:output_type -> webrtc.SendFramesResponse
	5,  // 10: webrtc.WebRTCService.GetWebRTCConfig:output_type -> webrtc.WebRTCConfig
	10, // 11: webrtc.WebRTCService.UpdateWebRTCConfig:output_type -> google.protobuf.Empty
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_libs_proto_webrtc_webrtc_proto_init() }
func file_libs_proto_webrtc_webrtc_proto_init() {
	if File_libs_proto_webrtc_webrtc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_libs_proto_webrtc_webrtc_proto_rawDesc), len(file_libs_proto_webrtc_webrtc_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_libs_proto_webrtc_webrtc_proto_goTypes,
		DependencyIndexes: file_libs_proto_webrtc_webrtc_proto_depIdxs,
		EnumInfos:         file_libs_proto_webrtc_webrtc_proto_enumTypes,
		MessageInfos:      file_libs_proto_webrtc_webrtc_proto_msgTypes,
	}.Build()
	File_libs_proto_webrtc_webrtc_proto = out.File
	file_libs_proto_webrtc_webrtc_proto_goTypes = nil
	file_libs_proto_webrtc_webrtc_proto_depIdxs = nil
}
