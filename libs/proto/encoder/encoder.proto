syntax = "proto3";

package encoder;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "libs/proto/encoder";

// Frame type enumeration
enum FrameType {
  UNKNOWN = 0;
  VIDEO = 1;
  AUDIO = 2;
  METADATA = 3;
}

// Frame represents a video or audio frame
message Frame {
  string stream_id = 1;
  string frame_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  FrameType type = 4;
  bytes data = 5;
  map<string, string> metadata = 6;
  int64 sequence = 7;
  bool is_key_frame = 8;
  int32 duration = 9; // Duration in milliseconds
}

// EncodeFramesRequest is used to encode a batch of frames
message EncodeFramesRequest {
  string stream_id = 1;
  repeated Frame frames = 2;
}

// EncodeFramesResponse contains the result of encoding frames
message EncodeFramesResponse {
  string status = 1;
  string error = 2;
}

// EncoderServiceConfig represents the configuration for the encoder service
message EncoderServiceConfig {
  string stream_id = 1;
  string video_codec = 2;
  string audio_codec = 3;
  int32 video_bitrate = 4;
  int32 audio_bitrate = 5;
  string resolution = 6;
  double framerate = 7;
  map<string, string> additional_params = 8;
}

// GetEncoderConfigRequest is used to get the configuration for a stream
message GetEncoderConfigRequest {
  string stream_id = 1;
}

// EncoderService handles frame encoding
service EncoderService {
  // Encode a batch of frames
  rpc EncodeFrames(EncodeFramesRequest) returns (EncodeFramesResponse);

  // Get the encoder configuration for a stream
  rpc GetEncoderConfig(GetEncoderConfigRequest) returns (EncoderServiceConfig);

  // Update the encoder configuration for a stream
  rpc UpdateEncoderConfig(EncoderServiceConfig) returns (google.protobuf.Empty);
}
