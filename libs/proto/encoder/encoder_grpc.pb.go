// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: libs/proto/encoder/encoder.proto

package encoder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EncoderService_EncodeFrames_FullMethodName        = "/encoder.EncoderService/EncodeFrames"
	EncoderService_GetEncoderConfig_FullMethodName    = "/encoder.EncoderService/GetEncoderConfig"
	EncoderService_UpdateEncoderConfig_FullMethodName = "/encoder.EncoderService/UpdateEncoderConfig"
)

// EncoderServiceClient is the client API for EncoderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EncoderService handles frame encoding
type EncoderServiceClient interface {
	// Encode a batch of frames
	EncodeFrames(ctx context.Context, in *EncodeFramesRequest, opts ...grpc.CallOption) (*EncodeFramesResponse, error)
	// Get the encoder configuration for a stream
	GetEncoderConfig(ctx context.Context, in *GetEncoderConfigRequest, opts ...grpc.CallOption) (*EncoderServiceConfig, error)
	// Update the encoder configuration for a stream
	UpdateEncoderConfig(ctx context.Context, in *EncoderServiceConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type encoderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncoderServiceClient(cc grpc.ClientConnInterface) EncoderServiceClient {
	return &encoderServiceClient{cc}
}

func (c *encoderServiceClient) EncodeFrames(ctx context.Context, in *EncodeFramesRequest, opts ...grpc.CallOption) (*EncodeFramesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodeFramesResponse)
	err := c.cc.Invoke(ctx, EncoderService_EncodeFrames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encoderServiceClient) GetEncoderConfig(ctx context.Context, in *GetEncoderConfigRequest, opts ...grpc.CallOption) (*EncoderServiceConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncoderServiceConfig)
	err := c.cc.Invoke(ctx, EncoderService_GetEncoderConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encoderServiceClient) UpdateEncoderConfig(ctx context.Context, in *EncoderServiceConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EncoderService_UpdateEncoderConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncoderServiceServer is the server API for EncoderService service.
// All implementations must embed UnimplementedEncoderServiceServer
// for forward compatibility.
//
// EncoderService handles frame encoding
type EncoderServiceServer interface {
	// Encode a batch of frames
	EncodeFrames(context.Context, *EncodeFramesRequest) (*EncodeFramesResponse, error)
	// Get the encoder configuration for a stream
	GetEncoderConfig(context.Context, *GetEncoderConfigRequest) (*EncoderServiceConfig, error)
	// Update the encoder configuration for a stream
	UpdateEncoderConfig(context.Context, *EncoderServiceConfig) (*emptypb.Empty, error)
	mustEmbedUnimplementedEncoderServiceServer()
}

// UnimplementedEncoderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEncoderServiceServer struct{}

func (UnimplementedEncoderServiceServer) EncodeFrames(context.Context, *EncodeFramesRequest) (*EncodeFramesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeFrames not implemented")
}
func (UnimplementedEncoderServiceServer) GetEncoderConfig(context.Context, *GetEncoderConfigRequest) (*EncoderServiceConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncoderConfig not implemented")
}
func (UnimplementedEncoderServiceServer) UpdateEncoderConfig(context.Context, *EncoderServiceConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEncoderConfig not implemented")
}
func (UnimplementedEncoderServiceServer) mustEmbedUnimplementedEncoderServiceServer() {}
func (UnimplementedEncoderServiceServer) testEmbeddedByValue()                        {}

// UnsafeEncoderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncoderServiceServer will
// result in compilation errors.
type UnsafeEncoderServiceServer interface {
	mustEmbedUnimplementedEncoderServiceServer()
}

func RegisterEncoderServiceServer(s grpc.ServiceRegistrar, srv EncoderServiceServer) {
	// If the following call pancis, it indicates UnimplementedEncoderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EncoderService_ServiceDesc, srv)
}

func _EncoderService_EncodeFrames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeFramesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).EncodeFrames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncoderService_EncodeFrames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).EncodeFrames(ctx, req.(*EncodeFramesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncoderService_GetEncoderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEncoderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).GetEncoderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncoderService_GetEncoderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).GetEncoderConfig(ctx, req.(*GetEncoderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncoderService_UpdateEncoderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncoderServiceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncoderServiceServer).UpdateEncoderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncoderService_UpdateEncoderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncoderServiceServer).UpdateEncoderConfig(ctx, req.(*EncoderServiceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// EncoderService_ServiceDesc is the grpc.ServiceDesc for EncoderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncoderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "encoder.EncoderService",
	HandlerType: (*EncoderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncodeFrames",
			Handler:    _EncoderService_EncodeFrames_Handler,
		},
		{
			MethodName: "GetEncoderConfig",
			Handler:    _EncoderService_GetEncoderConfig_Handler,
		},
		{
			MethodName: "UpdateEncoderConfig",
			Handler:    _EncoderService_UpdateEncoderConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/proto/encoder/encoder.proto",
}
